;;
; EWW CONFIGURATION
; 
; Wayland EWW widgets used with River WM. EWW is a standalone widget system built in Rust featuring
; its own language called Yuck that you're seeing here.
;
; Using this so that if a feature is missing then we can add it; if we get annoyed by any GUI detail
; then it's our own fault; and if it's not fixed quickly and we whine about lazy developers then
; we're only insulting ourselves---if we don't own it, we can't own up to it.
;
; Reference:
;
; * Documentation  
;   https://elkowar.github.io/eww  
; * Built-in widgets  
;   https://elkowar.github.io/eww/widgets.html
;
; @author   Daniel Nordstrom <d@mrnordstrom.com>
; @homepage https://mrnordstrom.com
; @license  MIT
; @updated  2022-07-29 13:10
; @version  2022.210
;;

(defvar tags '[{ "tag": 1, "label": 1 }, { "tag": 2, "label": 2 }, { "tag": 4, "label": 3 }, { "tag": 8, "label": 4 }, { "tag": 16, "label": 5 }, { "tag": 32, "label": 6 }, { "tag": 64, "label": 7 }, { "tag": 128, "label": 8 }, { "tag": 256, "label": 9 }]')
(defvar active-tag "1")
(defvar hover-tag "0")

(defpoll volume-value :interval "1s" "pamixer --get-volume")
(defpoll volume-label :interval "1s" '[ "$(pamixer --get-mute)" = "true" ] && printf "MUT" || printf "VOL"')

(defvar clock-separator "·")
(defvar clock-show-date false)
(defvar clock-lock-date false)
(defpoll clock-weekday :interval "1h" "date +'%A'")
(defpoll clock-time :interval "10s" "date +'%H:%M'")
(defpoll clock-date :interval "1h" "date +'%B %-d'")

(defvar launchers-show false)

(defwidget bar []
  (centerbox :orientation "h"
    (left)
    (center)
    (right)))

(defwidget left []
  (eventbox :onhover "eww update launchers-show=true"
            :onhoverlost "eww update launchers-show=false"
    (box :class "left" :orientation "h" :space-evenly false :halign "start"
      (tags)
      (launchers))))

(defwidget center []
  (box :class "center" :orientation "h" :space-evenly false :halign "center"
    (clock)))

(defwidget right []
  (box :class "right" :orientation "h" :space-evenly false :halign "end"
    (metric :label "CPU"
            :value {round(EWW_CPU.avg, 0)}
            :class "cpu"
            :onchange ""
            :onclick "")
    (metric :label "RAM"
            :value {EWW_RAM.used_mem_perc}
            :class "ram"
            :onchange ""
            :onclick "")
    (metric :label "DISK"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :class "disk"
            :onchange ""
            :onclick "")
    (metric :label volume-label
            :value volume-value
            :class {volume-label == "MUT" ? "volume muted" : "volume"}
            :onchange "pamixer --set-volume {}"
            :onclick "pamixer --toggle-mute")))

(defwidget tray []
  (box :class "tray" :orientation "h" (system-tray)))

(defwidget launchers []
  (revealer :class "launchers revealer ${launchers-show ? 'expanded' : 'collapsed'}"
            :transition "slideleft"
            :reveal launchers-show
            :duration "0.25s"
    (box :spacing 10
      (launcher :class "firefox" :cmd "firefox -P Default" :icon "")
      (launcher :class "music" :cmd "riverctl spawn 'firefox -P Music'" :icon "")
      (launcher :class "mail" :cmd "firefox -P Default https://mail.proton.me" :icon ""))))

(defwidget launcher [cmd class icon]
  (box :class "launcher ${class}"
       :orientation "h"
    (button :onclick cmd icon)))

(defwidget metric [label value onclick onchange class]
  (box :orientation "h"
       :class "metric ${class}"
       :space-evenly false
    (button :class "label" :onclick onclick label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwidget clock []
  (eventbox :onhover "eww update clock-show-date=true"
            :onhoverlost "eww update clock-show-date=false"
            :onclick {clock-lock-date ? "eww update clock-lock-date=false" : "eww update clock-lock-date=true"}
    (box :space-evenly false :class "clock"
      (revealer :class "revealer ${clock-show-date ? 'expanded' : 'collapsed'}"
                :transition "slideleft"
                :reveal {clock-show-date || clock-lock-date}
                :duration "0.25s"
        (box :space-evenly false :spacing 8
          (box :class "weekday" clock-weekday)
          (box :class "separator" clock-separator)
          (box "")))

      (box :class "time" clock-time)

      (revealer :class "revealer ${clock-show-date ? 'expanded' : 'collapsed'}"
              :transition "slideleft"
              :reveal {clock-show-date || clock-lock-date}
              :duration "0.25s"
        (box :space-evenly false :spacing 8
          (box "")
          (box :class "separator" clock-separator)
          (box :class "date" clock-date))))))

(defwidget tags []
  (box :class "tags"
       :orientation "h"
       :space-evenly true
       :halign "start"
       :spacing 10
    (for tag in tags
      (box :class {active-tag == tag.tag ? "tag active" : "tag inactive"}
        (eventbox 
          :onhover "eww update hover-tag=${tag.tag}"
          :onhoverlost "eww update hover-tag=0"
          (button :onclick "riverctl set-focused-tags ${tag.tag} ; eww update active-tag=${tag.tag}"
            {active-tag == tag.tag ? "" : (hover-tag == tag.tag ? tag.label : "")}))))))

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry
    :x "0%"
    :y "0%"
    :width "100%"
    :height "34px"
    :anchor "top center")
  :stacking "fg"
  :exclusive true
  :focusable false
  (bar)
)
