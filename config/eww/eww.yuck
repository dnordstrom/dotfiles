;;
; EWW CONFIGURATION
; 
; Wayland EWW widgets used with River WM. EWW is a standalone widget system built in Rust featuring
; its own language called Yuck that you're seeing here.
;
; Using this so that if a feature is missing then we can add it; if we get annoyed by any GUI detail
; then it's our own fault; and if it's not fixed quickly and we whine about lazy developers then
; we're only insulting ourselves---if we don't own it, we can't own up to it.
;
; Reference:
;
; * Documentation  
;   https://elkowar.github.io/eww  
; * Built-in widgets  
;   https://elkowar.github.io/eww/widgets.html
;
; @author   Daniel Nordstrom <d@mrnordstrom.com>
; @homepage https://mrnordstrom.com
; @license  MIT
; @updated  2022-07-29 13:10
; @version  2022.210
;;

(defvar tags "[1, 2, 4, 8, 16, 32, 64, 128, 256]")

(defvar activetag "1")

(defpoll volume :interval "1s"
  "amixer -D pipewire sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%' | head -1")

(defpoll time :interval "10s"
  "date '+%H:%M'")


(defwidget bar []
  (centerbox :orientation "h"
    (left)
    (center)
    (right)))

(defwidget left []
  (box :class "left" :orientation "h" :space-evenly false :halign "start"
    (workspaces)))

(defwidget center []
  (box :class "center" :orientation "h" :space-evenly false :halign "center"
    (time)))

(defwidget right []
  (box :class "right" :orientation "h" :space-evenly false :halign "end"
    (metric :label "CPU"
            :value {round(EWW_CPU.avg, 0)}
            :onchange "")
    (metric :label "RAM"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "DISK"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
    (metric :label "VOL"
            :value volume
            :onchange "amixer -D pipewire sset Master {}%")))

(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwidget time []
  (box :class "time"
       :orientation "h"
       :space-evenly false
       :halign "end"
    time))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
       :spacing 10
    (for tag in tags
      (button :onclick "riverctl set-focused-tags ${tag} ; eww --config ~/.config/eww-live update activetag=\"${tag}\" ; notify-send Success" {activetag == tag ? "a" : "o"})))
    )

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry
    :x "0%"
    :y "0%"
    :width "100%"
    :height "34px"
    :anchor "top center")
  :stacking "fg"
  :exclusive true
  :focusable false
  (bar)
)
