#!/usr/bin/env sh

##
# RIVER WINDOW MANAGER CONFIGURATION
#
# River is a tiling window manager for Wayland, configurable in any language via the `riverctl`
# executable and a layout generator (currently using the default `rivertile`).
#
# Let's stick with shell scripts for now but switch to Lua or Python as soon as it gets more
# complex. Or why not Go or Rust just for the fun of it, could be a simple learning experience (at
# the expense of having to recompile to test it).
##

##
# UTILITIES
##

# Spawn process, forwarding any arguments to `riverctl`.
_rctl_spawn() {
  riverctl spawn "$*"
}

# Spawn only if no running process was spawned with the same exact command.
_rctl_spawn_once() {
  pgrep -f "$*" >/dev/null || riverctl spawn "$*"
}

# Spawn in shell, avoiding boilerplate when using multiple commands, piping, etc.
_rctl_spawn_shell() {
  riverctl spawn "sh -c '$*'"
}

# Generate a `sh -c ...` command for running the given command(s), enclosed in single quotes after
# the command has done the substitution.
#
# Notes:
#   - I prefer explicit naming in combination with aliases, rather than short ambiguous naming.
#
# Examp     $ riverctl spawn $(shell_command "systemctl --user enable cool.service && nvim README.md")
#     = riverctl spawn zsh -c 'systemctl --user enable cool.service && nvim README.md'
#
# Arguments:
#   - $* - Any arguments are passed to she shell as command to run, as printed by `printf`.
#
# Returns:
#   - In terminal context, outputs shell command to standard output.
#   - In non-terminal contexts (e.g. piped to from another command), return the shell command.
#
# Globals:
#   - SHELL is used as the shell to launch. Until threre's a flag, it can be changed there:
#     `SHELL=zsh echo "$(shell_command echo Hello, dear world.)"`
_rctl_create_command() {
  shell="${SHELL:-"sh"}"
  result="$(printf "%s" "$shell -c '$*'")"

  if [ -t 0 ]; then
    printf "%s" "$result"
  else
    return "$result"
  fi
}

_rctl_map_exit_mode() {
  riverctl map "$1" None Escape enter-mode normal
  riverctl map "$1" None Return enter-mode normal
  riverctl map "$1" None Space enter-mode normal
}

##
# VARIABLES
##

# Paths.
path_kitty_sessions="$HOME/.config/kitty/sessions"

# Tags.
alltags="$(((1 << 32) - 1))"
stickytag="$((1 << 20))"
scratchtag="$((1 << 21))"
nostickytag="$((alltags ^ stickytag))"
noscratchtag="$((alltags ^ scratchtag))"
availabletags="$((noscratchtag ^ stickytag))"

# Terminal startup sessions.
cmd_terminal_plain="kitty --class=plainterm --title='Plain terminal'"
cmd_terminal_scratchpad="kitty --class=scratchterm --title 'Scratchpad terminal' -1 --instance-group=scratchterm --session=\"$path_kitty_sessions/scratchpad.session\""
cmd_terminal_popup="kitty --class=popupterm --title='Popup terminal' -1 --instance-group=popupterm"

# Launchers.
cmd_launch_app="/etc/nixos/scripts/launch/launchapp"
cmd_launch_cmd="/etc/nixos/scripts/launch/launchcommand"
cmd_launch_gui="rofi -show combi"

# File managers.
cmd_files_gtk="nemo"
cmd_files_qt="dolphin"
cmd_files_tui="$popupterm -e vifm"

# Font.
font_size=8
font_face="Public Sans $font_size"

# GTK.
gnome_schema="org.gnome.desktop.interface"
gtk_theme="Catppuccin-Latte-Peach"
cursor_theme="Quintom_Snow"
icon_theme="Vimix"

flatpak override --user --filesystem "$HOME/.local/share/themes"
flatpak override --user --env "GTK_THEME=$gtk_theme"

# TODO: Set this up properly.
#
# gsettings set "$gnome_schema" gtk-theme "$gtk_theme"
# gsettings set "$gnome_schema" icon-theme "$icon_theme"
# gsettings set "$gnome_schema" cursor-theme "$cursor_theme"
# gsettings set "$gnome_schema" font-name "$font"
# gsettings set "$gnome_schema" document-font-name "$font"

##
# SETTINGS
##

#
# Mouse
#

riverctl focus-follows-cursor normal

#
# Trackpad
#

trackpad="76:613:Apple_Inc._Magic_Trackpad_2"

# Enable acceleration (none, flat, or adaptive)
riverctl input $trackpad accel-profile adaptive

# Acceleration factor (between -1.0 and 1.0).
riverctl input $trackpad pointer-accel 0.5

# Tap to click.
riverctl input $trackpad tap enabled

# Click method (none, button-area, clickfinger)
riverctl input $trackpad click-method clickfinger

# Hide pointer while typing.
riverctl input $trackpad disable-while-typing enabled

# Scroll method (none, two-finger, edge, button)
riverctl input $trackpad scroll-method two-finger

# Middle-click emulation.
riverctl input $trackpad middle-eemulation enabled

# Natural scroll direction.
riverctl input $trackpad natural-scroll disabled

#
# Keyboard
#

riverctl set-repeat 50 300

#
# Colors and borders
#

riverctl background-color 0x002b36
riverctl border-color-focused 0x93a1a1
riverctl border-color-unfocused 0x586e75
riverctl border-width 2

##
# KEY MAPS
##

#
# Launchers
#
# We use our own little shell script launchers instead of some rock-solid, mature crap... In
# seriousness: we do and they're a little slow, but we cache the results so they're instant.
# Anywhere we can use `fzf` and our currently favorite terminal, we will---priceless duo.
#

# Applications and commands
riverctl map normal Super D spawn "$cmd_launch_app"
riverctl map normal Super+Shift D spawn "$cmd_launch_cmd"
riverctl map normal Super+Control D spawn "$cmd_launch_gui"

# Terminal emulators
riverctl map normal Super Return spawn "$cmd_terminal_plain"
riverctl map normal Super+Shift Return spawn "$cmd_terminal_scratchpad"
riverctl map normal Super+Control Return spawn "$cmd_terminal_popup"

# File managers
riverctl map normal Super G spawn "$cmd_files_tui"
riverctl map normal Super+Shift G spawn "$cmd_files_qt"
riverctl map normal Super+Control G spawn "$cmd_files_gtk"
riverctl map normal Super+Alt G spawn "$cmd_files_qt /etc/nixos"

#
# System
#

# Super+Q to close view
# Super+Backspace to exit session.
riverctl map normal Super Q close
riverctl map normal Super Backspace exit

# Show status bar (starts daemon if not running)
riverctl map normal Super B spawn "sh -c 'eww close bar || eww open bar'"

#
# Focus
#

# Super+Tab to quick switch to previous tags.
riverctl map normal Super Tab focus-previous-tags

# Super+J and Super+K to focus the next/previous view in the layout stack
# Super+Shift+J and Super+Shift+K to swap focused view with the next/previous view in stack.
riverctl map normal Super J focus-view next
riverctl map normal Super K focus-view previous
riverctl map normal Super+Shift J swap next
riverctl map normal Super+Shift K swap previous

# Super+Period|Comma to focus next/previous output.
# Super+Shift+Period|Comma to send view to next/previous output.
riverctl map normal Super Period focus-output next
riverctl map normal Super Comma focus-output previous
riverctl map normal Super+Shift Period send-to-output next
riverctl map normal Super+Shift Comma send-to-output previous

#
# Layout
#

# Decrease/increase the main area ratio
riverctl map normal Super H send-layout-cmd rivertile "main-ratio -0.05"
riverctl map normal Super L send-layout-cmd rivertile "main-ratio +0.05"

# Increment/decrement the main area count
riverctl map normal Super A send-layout-cmd rivertile "main-count +1"
riverctl map normal Super X send-layout-cmd rivertile "main-count -1"

# Super+LeftMouse+Drag to move view (automatically floats it).
# Super+RightMouse+Drag to resize view (automatically floats it).
riverctl map-pointer normal Super BTN_LEFT move-view
riverctl map-pointer normal Super BTN_RIGHT resize-view

# Bind number keys to tag actions
for i in $(seq 1 9); do
  tags=$((1 << (i - 1)))

  # Super+[1-9] to focus tag [0-8]
  riverctl map normal Super "$i" spawn "sh -c 'riverctl set-focused-tags $((stickytag + tags)) && eww update active-tag=$tags'"

  # Super+Shift+[1-9] to tag focused view with tag [0-8]
  riverctl map normal Super+Shift "$i" set-view-tags $tags

  # Super+Ctrl+[1-9] to toggle focus of tag [0-8]
  riverctl map normal Super+Control "$i" toggle-focused-tags $tags

  # Super+Shift+Ctrl+[1-9] to toggle tag [0-8] of focused view
  riverctl map normal Super+Shift+Control "$i" toggle-view-tags $tags
done

# Super+0 to focus all tags.
# Super+Shift+0 to tag focused view with all tags.
riverctl map normal Super 0 spawn "riverctl set-focused-tags $alltags && eww update active-tag=0"
riverctl map normal Super+Shift 0 set-view-tags $alltags

# TRY: Super+Shift/Control+F to toggle fullscreen, floating, and moving the view to the top ([F]irst
# or [F]ocus) of the stack and to the main area. They're kinda related since tiling, fullscreen, and
# floating are the only ways we use windows. Also, they mostly start with an `F`, mostly...
riverctl map normal Super F toggle-fullscreen  # Toggle fullscreen.
riverctl map normal Super+Shift F toggle-float # Toggle floating.
riverctl map normal Super+Control F zoom       # Move view to main layout area.

#
# SCRATCHPAD AND STICKY
#

# Toggle scratchpad
riverctl map normal Super Z toggle-focused-tags $scratchtag

# Send window to scratchpad
riverctl map normal Super+Shift Z set-view-tags $scratchtag

# Toggle sticky
riverctl map normal Super S toggle-view-tags $stickytag

# Ensure new windows don't have the scratchpad or sticky tag unless explicitly set
riverctl spawn-tagmask $availabletags

##
# MODES
##

#
# Declarations
#

riverctl declare-mode passthrough
riverctl declare-mode system
riverctl declare-mode window
riverctl declare-mode window-location
riverctl declare-mode window-move
riverctl declare-mode window-resize

#
# Map keys to exit modes
#

_rctl_map_exit_mode system
_rctl_map_exit_mode window
_rctl_map_exit_mode window-location
_rctl_map_exit_mode window-move
_rctl_map_exit_mode window-resize

#
# Window mode
#

# Trigger
riverctl map normal Super W enter-mode window

# Toggle sticky
riverctl map window None S toggle-view-tags $stickytag

# Send to scratchpad
riverctl map window None P set-view-tags $scratchtag

# Tag with [1-9]
for i in $(seq 1 9); do
  tags=$((1 << (i - 1)))

  # Window mode+[1-9] to tag focused view with tag [0-8]
  riverctl map window None "$i" spawn "riverctl set-focused-tags $((stickytag + tags)) ; eww update activetag=$i ; riverctl enter-mode normal"
done

#
# Window -> Resize mode
#

# Trigger
riverctl map window None R enter-mode window-resize

# Resize
riverctl map -repeat window-resize None H resize horizontal -50
riverctl map -repeat window-resize None J resize vertical 50
riverctl map -repeat window-resize None K resize vertical -50
riverctl map -repeat window-resize None L resize horizontal 50

#
# Window -> Move mode
#
# Super+W>M to resize window with H, J, K, L.
#

# Trigger
riverctl map window None M enter-mode window-move

# Move
riverctl map -repeat window-move None H move left 50
riverctl map -repeat window-move None J move down 50
riverctl map -repeat window-move None K move up 50
riverctl map -repeat window-move None L move right 50

#
# Window -> Location mode
#
# Super+W>L to set main window location with H, J, K, L.
#

# Trigger
riverctl map window None L enter-mode window-location

# Move location
riverctl map window-location None H send-layout-cmd rivertile "main-location left"
riverctl map window-location None J send-layout-cmd rivertile "main-location bottom"
riverctl map window-location None K send-layout-cmd rivertile "main-location top"
riverctl map window-location None L send-layout-cmd rivertile "main-location right"

#
# System status mode
#
# Super+Space>[key] print time, date, etc. as system notification.
#

# Trigger
riverctl map normal Super Space enter-mode system

# Time
riverctl map system None T spawn \
  "notify-send \"\$(date +'%H:%M')\" ; riverctl enter-mode normal"

# Date
riverctl map system None D spawn \
  "notify-send \"\$(date +'%A · %F · Week %V')\" ; riverctl enter-mode normal"

#
# Passthrough mode
#
# Only has a mapping to return to normal mode (useful for testing).
#

# Trigger
riverctl map normal Super F11 enter-mode passthrough

# Exit mode
riverctl map passthrough Super F11 enter-mode normal

#
# Locked mode
#

for mode in normal locked; do
  # Control volume with `pamixer`.
  riverctl map -repeat $mode None XF86AudioRaiseVolume spawn "pamixer -i 5"
  riverctl map -repeat $mode None XF86AudioLowerVolume spawn "pamixer -d 5"
  riverctl map $mode None XF86AudioMute spawn "pamixer --toggle-mute"

  # Control MPRIS aware media players with `playerctl`.
  riverctl map $mode None XF86AudioMedia spawn "playerctl play-pause"
  riverctl map $mode None XF86AudioPlay spawn "playerctl play-pause"
  riverctl map $mode None XF86AudioPrev spawn "playerctl previous"
  riverctl map $mode None XF86AudioNext spawn "playerctl next"

  # Control screen backlight brightness with `light`.
  riverctl map -repeat $mode None XF86MonBrightnessUp spawn "light -A 5"
  riverctl map -repeat $mode None XF86MonBrightnessDown spawn "light -U 5"
done

##
# FLOATING FILTERS
#
# We all float down here...
##

riverctl float-filter-add app-id "MyMonero"
riverctl float-filter-add app-id "element-desktop"
riverctl float-filter-add app-id "float"
riverctl float-filter-add app-id "io.github.celluloid_player.Celluloid"
riverctl float-filter-add app-id "mpv"
riverctl float-filter-add app-id "nemo"
riverctl float-filter-add app-id "org.gnome.Nautilus"
riverctl float-filter-add app-id "org.kde.Kate"
riverctl float-filter-add app-id "org.kde.dolphin"
riverctl float-filter-add app-id "org.kde.haruna"
riverctl float-filter-add app-id "pavucontrol"
riverctl float-filter-add app-id "qt5ct"
riverctl float-filter-add app-id "vimiv"
riverctl float-filter-add app-id "vlc"
riverctl float-filter-add app-id "wdisplays"

# TODO: Consider using `app-id` instead of `title` for the different terminals.
riverctl float-filter-add title "devterm"
riverctl float-filter-add title "fuzzyterm"
riverctl float-filter-add title "plainterm"
riverctl float-filter-add title "popupterm"
riverctl float-filter-add title "scratchterm"
riverctl float-filter-add title "transterm"

riverctl float-filter-add title "Bitwarden"
riverctl float-filter-add title "Kvantum Manager"
riverctl float-filter-add title "Parent process Browser Toolbox"

# TODO: When regular expressions are invented, use `title "Developer Tools - .+"`.

##
# CLIENT-SIDE DECORATION FILTERS
#
# These windows will be decorated client-side instead of by River. Useful for, for example, Firefox
# or Nautilus which may have rounded corners depending on GTK theme.
##

riverctl csd-filter-add app-id "com.github.wwmm.easyeffects"
riverctl csd-filter-add app-id "firefox-nightly"
riverctl csd-filter-add app-id "nemo"
riverctl csd-filter-add app-id "org.gnome.Nautilus"
riverctl csd-filter-add app-id "io.github.celluloid_player.Celluloid"
riverctl csd-filter-add app-id "wdisplays"

##
# WRAP UP
##

#
# Spawn on launch
#

# Convenience variables exported during session launch (or by sourcing this config).
export NORDIX_RIVER_TAGS_ALL="$(((1 << 32) - 1))"
export NORDIX_RIVER_TAGS_STICKY="$((1 << 20))"
export NORDIX_RIVER_TAGS_SCRATCHPAD="$((1 << 21))"
export NORDIX_RIVER_TAGS_NON_STICKY="$((alltags ^ stickytag))"
export NORDIX_RIVER_TAGS_NON_SCRATCHPAD="$((alltags ^ scratchtag))"
export NORDIX_RIVER_TAGS_NON_SPECIAL="$((noscratchtag ^ stickytag))"

# Convenience variables imported and available to D-BUS and `systemd`.
export NORDIX_ENV="NORDIX_ENV NORDIX_RIVER_TAGS_STICKY NORDIX_RIVER_TAGS_SCRATCHPAD"

# Not specifying which variables to import is deprecated. Usually `WAYLAND_DISPLAY`, `DISPLAY`,
# and `XDG_*` are recommended to import, but let's grab a handful as no one is watching anyway...
_rctl_spawn "dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_SESSION_DESKTOP XDG_SESSION_TYPE SDL_VIDEODRIVER XKB_DEFAULT_LAYOUT XKB_DEFAULT_OPTIONS XDG_CURRENT_DESKTOP XDG_DESKTOP_PORTAL_DIR XDG_DATA_DIRS XCURSOR_PATH XDG_RUNTIME_DIR LOCALE_ARCHIVE_2_27 DISPLAY GDK_BACKEND MOZ_DBUS_REMOTE MOZ_USE_XINPUT2 $NORDIX_ENV"

# This is probably unnecessary since we use `--systemd` above.
_rctl_spawn "systemctl --user import-environment WAYLAND_DISPLAY XDG_SESSION_DESKTOP XDG_SESSION_TYPE SDL_VIDEODRIVER XKB_DEFAULT_LAYOUT XKB_DEFAULT_OPTIONS XDG_CURRENT_DESKTOP XDG_DESKTOP_PORTAL_DIR XDG_DATA_DIRS XCURSOR_PATH XDG_RUNTIME_DIR LOCALE_ARCHIVE_2_27 DISPLAY GDK_BACKEND MOZ_DBUS_REMOTE MOZ_USE_XINPUT2 $NORDIX_ENV"

# Launch Policy Kit.
_rctl_spawn_once "/run/current-system/sw/libexec/polkit-gnome-authentication-agent-1"
_rctl_spawn_once "swaybg --image ~/Pictures/Wallpapers/active --mode fill --output '*'"
_rctl_spawn_once "riverctl set-focused-tags $scratchtag && riverctl spawn $scratchterm ; riverctl set-focused-tags $((stickytag + 1))"

# Trigger systemd target used to launch certain services.
_rctl_spawn_once "systemctl --user start river-session.target"

#
# MONITORS
#

# TODO: Set up monitors here using the following resolutions and update rates.
# DP-1:     3440x1440 @ 99.982 Hz
# HDMI-A-1: 1920x1080 @ 144.001007 Hz (60 Hz currently)
# DVI-D-1:  1920x1080 @ 60 Hz

#
# Layout generator
#

riverctl default-layout rivertile

# Only `exec` if we're in a TTY meaning we're logging in.
! [ -t 0 ] && exec rivertile -view-padding 10 -outer-padding 10 -main-ratio 0.6 -main-count 1 -main-location left >/dev/null 2>"$HOME/.local/share/logs/river.log"

# Otherwise we're likely reloading the configuration and shouldn't exit the shell.
rivertile -view-padding 10 -outer-padding 10 -main-ratio 0.6 -main-count 1 -main-location left >/dev/null 2>"$HOME/.local/share/logs/river.log" &! 
