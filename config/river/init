#!/usr/bin/env sh

##
# RIVER WINDOW MANAGER CONFIGURATION
#
# River is a tiling window manager for Wayland, configurable in any language via the `riverctl`
# executable and a layout generator (currently using the default `rivertile`).
#
# Let's stick with shell scripts for now but switch to Lua or Python as soon as it gets more
# complex. Or why not Go or Rust just for the fun of it, could be a simple learning experience (at
# the expense of having to recompile to test it).
##

#
# UTILITIES
#

spawn() {
  riverctl spawn "$*"
}

spawn_once() {
  pgrep -f "$*" >/dev/null || riverctl spawn "$*"
}

font_size=8
font="Input Sans Condensed $font_size"

gnome_schema="org.gnome.desktop.interface"
gtk_theme="Catppuccin-yellow"
cursor_theme="Catppuccin-Teal-Cursors"
icon_theme="Vimix-dark"

# termweatherwidth=920
# termweatherheight=920
#
# termpopupwidth=1200
# termpopupheight=900
#
# termplainwidth=920
# termplainheight=920
#
# termscratchwidth=1800
# termscratchheight=950
#
# fuzzytermwidth=680
# fuzzytermheight=380
#
# floatdefaultwidth=1280
# floatdefaultheight=820

flatpak override --user --filesystem "$HOME/.local/share/themes"
flatpak override --user --env "GTK_THEME=$gtk_theme"

gsettings set "$gnome_schema" gtk-theme "$gtk_theme"
gsettings set "$gnome_schema" icon-theme "$icon_theme"
gsettings set "$gnome_schema" cursor-theme "$cursor_theme"
gsettings set "$gnome_schema" font-name "$font"
gsettings set "$gnome_schema" document-font-name "$font"

#
# SETTINGS
#

# Mouse
riverctl focus-follows-cursor normal

# Keyboard
riverctl set-repeat 50 300

# Colors
riverctl background-color 0x002b36
riverctl border-color-focused 0x93a1a1
riverctl border-color-unfocused 0x586e75
riverctl border-width 2

# Layout generator
riverctl default-layout rivertile
rivertile \
  -view-padding 10 \
  -outer-padding 10 \
  -main-ratio 0.6 \
  -main-count 1 \
  -main-location left

#
# LAUNCHERS
#
# We use our own little shell script launchers instead of some rock-solid, mature crap... In
# seriousness: we do and they're a little slow, but we cache the results so they're instant.
# Anywhere we can use `fzf` and our currently favorite terminal, we will---priceless duo.
#

riverctl map normal Super D spawn "/etc/nixos/scripts/launch/launch-app"
riverctl map normal Super+Shift D spawn "/etc/nixos/scripts/launch/launch-command"
riverctl map normal Super+Shift+Control D spawn "wofi"
# NOTE: `j4-dmenu-desktop` is another alternative. Super fast, runs anything, pairs well with `fzf`.

riverctl map normal Super Return spawn "kitty --title term"

#
# SYSTEM
#

# Super+Q to close the focused view
riverctl map normal Super Q close

# Super+Shift+E to exit river
riverctl map normal Super Backspace exit

#
# NAVIGATION
#

# Super+J and Super+K to focus the next/previous view in the layout stack
riverctl map normal Super J focus-view next
riverctl map normal Super K focus-view previous

# Super+Shift+J and Super+Shift+K to swap the focused view with the next/previous
# view in the layout stack
riverctl map normal Super+Shift J swap next
riverctl map normal Super+Shift K swap previous

# Super+Period and Super+Comma to focus the next/previous output
riverctl map normal Super Period focus-output next
riverctl map normal Super Comma focus-output previous

# Super+Shift+{Period,Comma} to send the focused view to the next/previous output
riverctl map normal Super+Shift Period send-to-output next
riverctl map normal Super+Shift Comma send-to-output previous

# Super+Shift+Return to bump the focused view to the top of the layout stack
riverctl map normal Super+Shift Return zoom

# Super+H and Super+L to decrease/increase the main ratio of rivertile(1)
# riverctl map normal Super H send-layout-cmd rivertile "main-ratio -0.05"
# riverctl map normal Super L send-layout-cmd rivertile "main-ratio +0.05"

# Ratio of display used by main area
riverctl map -repeat normal Super H send-layout-cmd kile "mod_main_ratio +0.01"
riverctl map -repeat normal Super L send-layout-cmd kile "mod_main_ratio -0.01"

# Number of views/windows/clients in the main area
riverctl map normal Super+Shift H send-layout-cmd kile "mod_main_amount +1"
riverctl map normal Super+Shift L send-layout-cmd kile "mod_main_amount -1"

# Super+Shift+H and Super+Shift+L to increment/decrement the main count of rivertile(1)
# riverctl map normal Super+Shift H send-layout-cmd rivertile "main-count +1"
# riverctl map normal Super+Shift L send-layout-cmd rivertile "main-count -1"

# Super+Alt+{H,J,K,L} to move views
riverctl map normal Super+Alt H move left 100
riverctl map normal Super+Alt J move down 100
riverctl map normal Super+Alt K move up 100
riverctl map normal Super+Alt L move right 100

# Super+Alt+Control+{H,J,K,L} to snap views to screen edges
riverctl map normal Super+Alt+Control H snap left
riverctl map normal Super+Alt+Control J snap down
riverctl map normal Super+Alt+Control K snap up
riverctl map normal Super+Alt+Control L snap right

# Super+Alt+Shift+{H,J,K,L} to resize views
riverctl map normal Super+Alt+Shift H resize horizontal -100
riverctl map normal Super+Alt+Shift J resize vertical 100
riverctl map normal Super+Alt+Shift K resize vertical -100
riverctl map normal Super+Alt+Shift L resize horizontal 100

# Super + Left Mouse Button to move views
riverctl map-pointer normal Super BTN_LEFT move-view

# Super + Right Mouse Button to resize views
riverctl map-pointer normal Super BTN_RIGHT resize-view

for i in $(seq 1 9); do
  tags=$((1 << ($i - 1)))

  # Super+[1-9] to focus tag [0-8]
  riverctl map normal Super $i set-focused-tags $tags

  # Super+Shift+[1-9] to tag focused view with tag [0-8]
  riverctl map normal Super+Shift $i set-view-tags $tags

  # Super+Ctrl+[1-9] to toggle focus of tag [0-8]
  riverctl map normal Super+Control $i toggle-focused-tags $tags

  # Super+Shift+Ctrl+[1-9] to toggle tag [0-8] of focused view
  riverctl map normal Super+Shift+Control $i toggle-view-tags $tags
done

# Super+0 to focus all tags
# Super+Shift+0 to tag focused view with all tags
all=$(((1 << 32) - 1))
riverctl map normal Super 0 set-focused-tags $all
riverctl map normal Super+Shift 0 set-view-tags $all

# Super+F to toggle fullscreen view
riverctl map normal Super F toggle-fullscreen

# Super+Shift+F to toggle floating view
riverctl map normal Super Space toggle-float

# TRY: Super+F and Super+Shift+F to toggle fullscreen and floating respectively. Let's try this,
# they're kinda related since tiling, fullscreen, and floating are the only ways we use windows.
# Also, they mostly start with an `F`, mostly...
riverctl map normal Super F toggle-fullscreen
riverctl map normal Super+Shift F toggle-float

# Super+{Up,Right,Down,Left} to change layout orientation
riverctl map normal Super Up send-layout-cmd rivertile "main-location top"
riverctl map normal Super Right send-layout-cmd rivertile "main-location right"
riverctl map normal Super Down send-layout-cmd rivertile "main-location bottom"
riverctl map normal Super Left send-layout-cmd rivertile "main-location left"

#
# MODES
#

riverctl declare-mode system

riverctl map normal Super S enter-mode system
riverctl map system Super S enter-mode normal

riverctl map system None Escape enter-mode normal
riverctl map system None Return enter-mode normal
riverctl map system None Space enter-mode normal

riverctl map system None T spawn "notify-send \"\$(date +'%H:%M')\" ; riverctl enter-mode normal"
riverctl map system None D spawn "notify-send \"\$(date +'%A · %F · Week %V')\" ; riverctl enter-mode normal"

# Declare a passthrough mode. This mode has only a single mapping to return to
# normal mode. This makes it useful for testing a nested wayland compositor
riverctl declare-mode passthrough

# Super+F11 to enter passthrough mode
riverctl map normal Super F11 enter-mode passthrough

# Super+F11 to return to normal mode
riverctl map passthrough Super F11 enter-mode normal

# Various media key mapping examples for both normal and locked mode which do
# not have a modifier
for mode in normal locked; do
  # Control pulse audio volume with pamixer (https://github.com/cdemoulins/pamixer)
  riverctl map $mode None XF86AudioRaiseVolume spawn 'pamixer -i 5'
  riverctl map $mode None XF86AudioLowerVolume spawn 'pamixer -d 5'
  riverctl map $mode None XF86AudioMute spawn 'pamixer --toggle-mute'

  # Control MPRIS aware media players with playerctl (https://github.com/altdesktop/playerctl)
  riverctl map $mode None XF86AudioMedia spawn 'playerctl play-pause'
  riverctl map $mode None XF86AudioPlay spawn 'playerctl play-pause'
  riverctl map $mode None XF86AudioPrev spawn 'playerctl previous'
  riverctl map $mode None XF86AudioNext spawn 'playerctl next'

  # Control screen backlight brightness with light (https://github.com/haikarainen/light)
  riverctl map $mode None XF86MonBrightnessUp spawn 'light -A 5'
  riverctl map $mode None XF86MonBrightnessDown spawn 'light -U 5'
done

#
# WINDOW-SPECIFIC
#

# Floating windows
j
riverctl float-filter-add app-id dolphin
riverctl float-filter-add app-id float
riverctl float-filter-add app-id org.kde.Kate
riverctl float-filter-add app-id pavucontrol
riverctl float-filter-add app-id qt5ct
riverctl float-filter-add app-id vimiv
riverctl float-filter-add title "Bitwarden"
riverctl float-filter-add title "Kvantum Manager"
riverctl float-filter-add title fuzzyterm
riverctl float-filter-add title popupterm
riverctl float-filter-add title transterm

# Client-side decorated windows

riverctl csd-filter-add app-id nautilus
riverctl csd-filter-add app-id firefox-nightly

#
# WRAP UP
#

spawn "dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP=river"
spawn "systemctl --user import-environment WAYLAND_DISPLAY XDG_CURRENT_DESKTOP=river"

spawn_once "/run/current-system/sw/libexec/polkit-gnome-authentication-agent-1"
spawn_once "swaybg --image ~/Pictures/Wallpapers/active3.jpg --mode fill --output '*'"

# We'll piggy-back on the Sway systemd target for now since they'll both use the same tools either
# way, but River should get its own target eventually, First need to look into how Home Manager
# manages it and which apps and services we actually use in River.
spawn "systemctl --user start sway-session.target"
