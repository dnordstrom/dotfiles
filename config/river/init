#!/usr/bin/env sh

##
# RIVER WINDOW MANAGER CONFIGURATION
#
# River is a tiling window manager for Wayland, configurable in any language via the `riverctl`
# executable and a layout generator (currently using the default `rivertile`).
#
# Let's stick with shell scripts for now but switch to Lua or Python as soon as it gets more
# complex. Or why not Go or Rust just for the fun of it, could be a simple learning experience (at
# the expense of having to recompile to test it).
##

##
# UTILITIES
##

spawn() {
  riverctl spawn "$*"
}

spawn_once() {
  pgrep -f "$*" >/dev/null || riverctl spawn "$*"
}

map_exit_mode() {
  riverctl map "$1" None Escape enter-mode normal
  riverctl map "$1" None Return enter-mode normal
  riverctl map "$1" None Space enter-mode normal
}

##
# VARIABLES
##

# Tags
alltags="$(((1 << 32) - 1))"
stickytag="$((1 << 20))"
scratchtag="$((1 << 21))"
nostickytag="$((alltags ^ stickytag))"
noscratchtag="$((alltags ^ scratchtag))"
availabletags="$((noscratchtag ^ stickytag))"

# Terminal
term="kitty --title term --single-instance --instance-group term"
scratchterm="kitty --title scratchterm --single-instance --instance-group scratchterm --session ~/.config/kitty/sessions/scratchpad.session"

# Launchers
launchapp="/etc/nixos/scripts/launch/launch-app"
launchcmd="/etc/nixos/scripts/launch/launch-command"
launchalt="wofi"

# Font
font_size=8
font="Input Sans Condensed $font_size"

# GTK
gnome_schema="org.gnome.desktop.interface"
gtk_theme="Catppuccin-yellow"
cursor_theme="Catppuccin-Teal-Cursors"
icon_theme="Vimix-dark"

# termweatherwidth=920
# termweatherheight=920
#
# termpopupwidth=1200
# termpopupheight=900
#
# termplainwidth=920
# termplainheight=920
#
# termscratchwidth=1800
# termscratchheight=950
#
# fuzzytermwidth=680
# fuzzytermheight=380
#
# floatdefaultwidth=1280
# floatdefaultheight=820

flatpak override --user --filesystem "$HOME/.local/share/themes"
flatpak override --user --env "GTK_THEME=$gtk_theme"

gsettings set "$gnome_schema" gtk-theme "$gtk_theme"
gsettings set "$gnome_schema" icon-theme "$icon_theme"
gsettings set "$gnome_schema" cursor-theme "$cursor_theme"
gsettings set "$gnome_schema" font-name "$font"
gsettings set "$gnome_schema" document-font-name "$font"

##
# SETTINGS
##

# Mouse
riverctl focus-follows-cursor normal

# Keyboard
riverctl set-repeat 50 300

# Colors
riverctl background-color 0x002b36
riverctl border-color-focused 0x93a1a1
riverctl border-color-unfocused 0x586e75
riverctl border-width 2

##
# KEY MAPS
##

#
# Launchers
#
# We use our own little shell script launchers instead of some rock-solid, mature crap... In
# seriousness: we do and they're a little slow, but we cache the results so they're instant.
# Anywhere we can use `fzf` and our currently favorite terminal, we will---priceless duo.
#
# NOTE: `j4-dmenu-desktop` is another alternative. Super fast, runs anything, pairs well with `fzf`.
#

# Applications and commands
riverctl map normal Super D spawn "$launchapp"
riverctl map normal Super Space spawn "$launchapp"
riverctl map normal Super+Shift D spawn "$launchcmd"
riverctl map normal Super+Shift+Control D spawn "$launchalt"

# Terminal emulators
riverctl map normal Super Return spawn "$term"
riverctl map normal Super+Shift Return spawn "$scratchterm"

#
# System
#

# Super+Q to close the focused view
riverctl map normal Super Q close

# Super+Shift+E to exit river
riverctl map normal Super Backspace exit

# Show status bar
riverctl map normal Super B spawn "eww close bar || eww open bar"

#
# Focus
#

# Switch to previous tags
riverctl map normal Super Tab focus-previous-tags

# Super+J and Super+K to focus the next/previous view in the layout stack
riverctl map normal Super J focus-view next
riverctl map normal Super K focus-view previous

# Super+Shift+J and Super+Shift+K to swap the focused view with the next/previous
# view in the layout stack
riverctl map normal Super+Shift J swap next
riverctl map normal Super+Shift K swap previous

# Super+Period and Super+Comma to focus the next/previous output
riverctl map normal Super Period focus-output next
riverctl map normal Super Comma focus-output previous

# Super+Shift+{Period,Comma} to send the focused view to the next/previous output
riverctl map normal Super+Shift Period send-to-output next
riverctl map normal Super+Shift Comma send-to-output previous

#
# Layout
#

# Decrease/increase the main area ratio
riverctl map normal Super H send-layout-cmd rivertile "main-ratio -0.05"
riverctl map normal Super L send-layout-cmd rivertile "main-ratio +0.05"

# Increment/decrement the main area count
riverctl map normal Super A send-layout-cmd rivertile "main-count +1"
riverctl map normal Super X send-layout-cmd rivertile "main-count -1"

# Modifier and left mouse button to move views
riverctl map-pointer normal Super BTN_LEFT move-view

# Modifier and right mouse button to resize views
riverctl map-pointer normal Super BTN_RIGHT resize-view

# Bind number keys to tag actions
for i in $(seq 1 9); do
  tags=$((1 << (i - 1)))

  # Super+[1-9] to focus tag [0-8]
  riverctl map normal Super "$i" set-focused-tags $((stickytag + tags))

  # Super+Shift+[1-9] to tag focused view with tag [0-8]
  riverctl map normal Super+Shift "$i" set-view-tags $tags

  # Super+Ctrl+[1-9] to toggle focus of tag [0-8]
  riverctl map normal Super+Control "$i" toggle-focused-tags $tags

  # Super+Shift+Ctrl+[1-9] to toggle tag [0-8] of focused view
  riverctl map normal Super+Shift+Control "$i" toggle-view-tags $tags
done

# Super+0 to focus all tags
# Super+Shift+0 to tag focused view with all tags
riverctl map normal Super 0 set-focused-tags $alltags
riverctl map normal Super+Shift 0 set-view-tags $alltags

# TRY: Super+Shift/Control+F to toggle fullscreen, floating, and moving the view to the top ([F]irst
# or [F]ocus) of the stack and to the main area. They're kinda related since tiling, fullscreen, and
# floating are the only ways we use windows. Also, they mostly start with an `F`, mostly...
riverctl map normal Super F toggle-fullscreen  # Fullscreen
riverctl map normal Super+Shift F toggle-float # Float
riverctl map normal Super+Control F zoom       # Focus

#
# SCRATCHPAD AND STICKY
#

# Toggle scratchpad
riverctl map normal Super Z toggle-focused-tags $scratchtag

# Send window to scratchpad
riverctl map normal Super+Shift Z set-view-tags $scratchtag

# Toggle sticky
riverctl map normal Super S toggle-view-tags $stickytag

# Ensure new windows don't have the scratchpad or sticky tag unless explicitly set
riverctl spawn-tagmask $availabletags

##
# MODES
##

#
# Declarations
#

riverctl declare-mode passthrough
riverctl declare-mode system
riverctl declare-mode window
riverctl declare-mode window-location
riverctl declare-mode window-move
riverctl declare-mode window-resize

#
# Map keys to exit modes
#

map_exit_mode system
map_exit_mode window
map_exit_mode window-location
map_exit_mode window-move
map_exit_mode window-resize

#
# Window mode
#

# Trigger
riverctl map normal Super W enter-mode window

# Toggle sticky
riverctl map window None S toggle-view-tags $stickytag

# Send to scratchpad
riverctl map window None P set-view-tags $scratchtag

# Tag with [1-9]
for i in $(seq 1 9); do
  tags=$((1 << (i - 1)))

  # Window mode+[1-9] to tag focused view with tag [0-8]
  riverctl map window Super "$i" spawn "riverctl set-focused-tags $((stickytag + tags)) ; riverctl enter-mode normal"
done

#
# Window -> Resize mode
#

# Trigger
riverctl map window None R enter-mode window-resize

# Resize
riverctl map -repeat window-resize None H resize horizontal -50
riverctl map -repeat window-resize None J resize vertical 50
riverctl map -repeat window-resize None K resize vertical -50
riverctl map -repeat window-resize None L resize horizontal 50

#
# Window -> Move mode
#
# Super+W>M to resize window with H, J, K, L.
#

# Trigger
riverctl map window None M enter-mode window-move

# Move
riverctl map -repeat window-move None H move left 50
riverctl map -repeat window-move None J move down 50
riverctl map -repeat window-move None K move up 50
riverctl map -repeat window-move None L move right 50

#
# Window -> Location mode
#
# Super+W>L to set main window location with H, J, K, L.
#

# Trigger
riverctl map window None L enter-mode window-location

# Move location
riverctl map window-location None H send-layout-cmd rivertile "main-location left"
riverctl map window-location None J send-layout-cmd rivertile "main-location bottom"
riverctl map window-location None K send-layout-cmd rivertile "main-location top"
riverctl map window-location None L send-layout-cmd rivertile "main-location right"

#
# System status mode
#
# Super+Space>[key] print time, date, etc. as system notification.
#

# Trigger
riverctl map normal Super Space enter-mode system

# Time
riverctl map system None T spawn \
  "notify-send \"\$(date +'%H:%M')\" ; riverctl enter-mode normal"

# Date
riverctl map system None D spawn \
  "notify-send \"\$(date +'%A · %F · Week %V')\" ; riverctl enter-mode normal"

#
# Passthrough mode
#
# Only has a mapping to return to normal mode (useful for testing).
#

# Trigger
riverctl map normal Super F11 enter-mode passthrough

# Exit mode
riverctl map passthrough Super F11 enter-mode normal

#
# Locked mode
#

for mode in normal locked; do
  # Control volume with `pamixer`.
  riverctl map -repeat $mode None XF86AudioRaiseVolume spawn "pamixer -i 5"
  riverctl map -repeat $mode None XF86AudioLowerVolume spawn "pamixer -d 5"
  riverctl map $mode None XF86AudioMute spawn "pamixer --toggle-mute"

  # Control MPRIS aware media players with `playerctl`.
  riverctl map $mode None XF86AudioMedia spawn "playerctl play-pause"
  riverctl map $mode None XF86AudioPlay spawn "playerctl play-pause"
  riverctl map $mode None XF86AudioPrev spawn "playerctl previous"
  riverctl map $mode None XF86AudioNext spawn "playerctl next"

  # Control screen backlight brightness with `light`.
  riverctl map -repeat $mode None XF86MonBrightnessUp spawn "light -A 5"
  riverctl map -repeat $mode None XF86MonBrightnessDown spawn "light -U 5"
done

##
# FLOATING FILTERS
#
# We all float down here...
##

riverctl float-filter-add app-id "float"
riverctl float-filter-add app-id "nemo"
riverctl float-filter-add app-id "org.gnome.Nautilus"
riverctl float-filter-add app-id "org.kde.Kate"
riverctl float-filter-add app-id "org.kde.dolphin"
riverctl float-filter-add app-id "pavucontrol"
riverctl float-filter-add app-id "qt5ct"
riverctl float-filter-add app-id "vimiv"
riverctl float-filter-add title "Bitwarden"
riverctl float-filter-add title "Kvantum Manager"
riverctl float-filter-add title "fuzzyterm"
riverctl float-filter-add title "popupterm"
riverctl float-filter-add title "scratchterm"
riverctl float-filter-add title "transterm"

##
# CLIENT-SIDE DECORATION FILTERS
#
# These windows will be decorated client-side instead of by River. Useful for, for example, Firefox
# or Nautilus which may have rounded corners depending on GTK theme.
##

riverctl csd-filter-add app-id "com.github.wwmm.easyeffects"
riverctl csd-filter-add app-id "firefox-nightly"
riverctl csd-filter-add app-id "nemo"
riverctl csd-filter-add app-id "org.gnome.Nautilus"

##
# WRAP UP
##

#
# Spawn on launch
#

spawn "dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_SESSION_DESKTOP XDG_SESSION_TYPE SDL_VIDEODRIVER XKB_DEFAULT_LAYOUT XKB_DEFAULT_OPTIONS XDG_CURRENT_DESKTOP XDG_DESKTOP_PORTAL_DIR XDG_DATA_DIRS XCURSOR_PATH XDG_RUNTIME_DIR LOCALE_ARCHIVE_2_27 DISPLAY GDK_BACKEND MOZ_DBUS_REMOTE MOZ_USE_XINPUT2"
spawn "systemctl --user import-environment WAYLAND_DISPLAY XDG_SESSION_DESKTOP XDG_SESSION_TYPE SDL_VIDEODRIVER XKB_DEFAULT_LAYOUT XKB_DEFAULT_OPTIONS XDG_CURRENT_DESKTOP XDG_DESKTOP_PORTAL_DIR XDG_DATA_DIRS XCURSOR_PATH XDG_RUNTIME_DIR LOCALE_ARCHIVE_2_27 DISPLAY GDK_BACKEND MOZ_DBUS_REMOTE MOZ_USE_XINPUT2"
spawn "waybar"
spawn_once "/run/current-system/sw/libexec/polkit-gnome-authentication-agent-1"
spawn_once "swaybg --image ~/Pictures/Wallpapers/active3.jpg --mode fill --output '*'"
spawn_once "riverctl set-focused-tags $scratchtag && riverctl spawn $scratchterm ; riverctl set-focused-tags $((stickytag + 1))"

# We'll piggy-back on the Sway systemd target for now since they'll both use the same tools either
# way, but River should get its own target eventually, First need to look into how Home Manager
# manages it and which apps and services we actually use in River.
spawn "systemctl --user start river-session.target"

#
# MONITORS
#

# TODO: Set up monitors here using the following resolutions and update rates.
# DP-1:     1920x1080@144.001007Hz
# DVI-D-1:  1920x1080@60Hz

#
# Layout generator
#

riverctl default-layout rivertile

# Only `exec` if we're in a TTY meaning we're logging in.
[ -n "$(tty)" ] && exec rivertile \
  -view-padding 10 \
  -outer-padding 10 \
  -main-ratio 0.6 \
  -main-count 1 \
  -main-location left 2>"$HOME/.local/share/logs/river.log"

# Otherwise we're likely reloading the configuration and shouldn't exit the shell.
[ -z "$(tty)" ] && nohup rivertile \
  -view-padding 10 \
  -outer-padding 10 \
  -main-ratio 0.6 \
  -main-count 1 \
  -main-location left 2>"$HOME/.local/share/logs/river.log" &
