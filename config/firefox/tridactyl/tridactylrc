"
" Tridactyl configuration
"
" Author: Daniel Nordstrom <d@mrnordstrom.com>
" Repository: https://github.com/dnordstrom/dotfiles
"

" Reset
sanitise tridactyllocal tridactylsync

"
" Settings
"

colorscheme nord

" General

set newtab about:blank
set allowautofocus false
set editorcmd alacritty --class 'terminal' --title 'terminal' -e nvim %f '+normal!%lGzv%c|'
set hintchars fdsqjklmrezauiopwxcvghtybn
set hintuppercase false
set minincsearchlen 2
set searchengine google
set smoothscroll true
set tabopencontaineraware true
set visualenterauto true
set viewsource default

" Search

set searchurls.g https://www.google.com/search?q=%s&num=100
set searchurls.google https://www.google.com/search?q=%s&num=100
set searchurls.googlerecent https://www.google.com/search?q=%s&num=100&tbs=qdr:y
set searchurls.reddit https://www.google.com/search?q=%s%20site:reddit.com&num=100
set searchurls.mdn https://developer.mozilla.org/en-US/search?q=%s&topic=api&topic=js
set searchurls.npm https://www.npmjs.com/search?q=%s
set searchurls.n https://search.nixos.org/packages?channel=unstable&size=500&query=%s
set searchurls.nix https://search.nixos.org/packages?channel=unstable&size=500&query=%s
set searchurls.searx https://searx.be/?q=%s
set searchurls.startpage https://www.startpage.com/do/search?query=%s
set searchurls.duckduckgo https://duckduckgo.com/?kp=-2&q=%s&ia=web

"
" Commands
"

" Pass current URL to command
command withurl composite get_current_url |

" Replace binds with another prefix (exclamation point removes old binds)
command bindreplaceprefix js -d% const [_, oldPrefix, newPrefix] = JS_ARGS; Object.entries(tri.config.get('nmaps')).map(([key, cmd]) => ({ key, cmd })).filter(({ key }) => key.startsWith(oldPrefix)).map(({ key, cmd }) => { tri.excmds.bind('--mode=normal', key.replace(oldPrefix, newPrefix), cmd); }) %
command bindreplaceprefix! js -d% const [_, oldPrefix, newPrefix] = JS_ARGS; Object.entries(tri.config.get('nmaps')).map(([key, cmd]) => ({ key, cmd })).filter(({ key }) => key.startsWith(oldPrefix)).map(({ key, cmd }) => { tri.excmds.bind('--mode=normal', key.replace(oldPrefix, newPrefix), cmd); tri.excmds.unbind(key); }) %

" Show command line notification
command notify js -d% tri.excmds.fillcmdline_tmp(3000, JS_ARGS.join(' ').trim()); %

" Show OS notification
command notifyos js -d% tri.native.run(`notify-send "${JS_ARGS.join(' ').trim()}"`); %

" Show JS console notification
command notifyjs js -d% console.log("%c N.log ", "background: #d8dee9; color: #2e3440; font-weight: bold;", JS_ARGS.join(' ').trim()); %

" Inspect JavaScript object in console
command jsp js -p tri.excmds.js(`console.dir(${JS_ARG})`);
command jsbp js -p tri.excmds.js(`console.dir(${JS_ARG})`);

" Append note to ~/.notes.firefox.md (only URL and title if no argument)
command note js -d% const link = `[${document.title}](${document.location.toString()})`; const note = JS_ARGS.join(' '); if (note) { tri.native.run(`touch ~/.notes.firefox.md && echo "- \"${note}\" --- ${link}\n\$(cat ~/.notes.firefox.md)" > ~/.notes.firefox.md`); } else { tri.native.run(`touch ~/.notes.firefox.md && echo "- ${link}\n$(cat ~/.notes.firefox.md)" > ~/.notes.firefox.md`); } %

" Prefill note command
command fillcmdline_note js -p tri.excmds.fillcmdline_notrail(`note ${JS_ARG}`)

" Prefill note command with selection (using JS because of Wayland)
command fillcmdline_note_selection js tri.excmds.fillcmdline_notrail(`note ${window.getSelection()}`);

" Prefill note command with clipboard
command fillcmdline_note_clipboard js tri.excmds.fillcmdline_notrail(`note ${await tri.excmds.getclip()}`);

" Reload config from /etc/nixos
command reconfiglive source /etc/nixos/config/firefox/tridactyl/tridactylrc

" Reload config from ~/.config/tridactyl
command reconfig source

"
" Key binds
"

" Configuration

bind <Space>rr composite reconfig ; notify Configuration reloaded.
bind <Space>rR composite reconfiglive ; notify Live configuration reloaded.

" Notes

bind <Space>nn fillcmdline note
bind <Space>ny fillcmdline_note_selection
bind <Space>np fillcmdline_note_clipboard

" Buffers/tabs

bind <Space><Space> fillcmdline_notrail
bind <Space>bb fillcmdline taball
bind <Space>bd tabdetach

" Search

bind / fillcmdline find
bind ? fillcmdline find -?
bind n findnext 1
bind N findnext -1
bind <Space>h nohlsearch

" Yank

bind yj js if (N.pathStart('/jira')) { const issue = N.param('selectedIssue'); if (issue) N.yank(issue) && N.notify(`Yanked ${issue}`); }

" Change

bind cp open about:profiles
bind cs fillcmdline set

" Navigation

bind H tabprev
bind J back
bind K forward
bind L tabnext

" Movement

bind x tabclose

bind gd tabdetach
bind gD composite tabduplicate ; tabdetach

bind ZQ composite sanitise tridactyllocal tridactylsync ; exclaim_quiet killall firefox
bind ZZ exclaim_quiet killall firefox

" Command mode

" Vim style
bind --mode=ex <C-h> exclaim_quiet wtype -k left
bind --mode=ex <C-j> exclaim_quiet wtype -k down
bind --mode=ex <C-k> exclaim_quiet wtype -k up
bind --mode=ex <C-l> exclaim_quiet wtype -k right

" Emacs style
bind --mode=ex <C-a> exclaim_quiet wtype -k home
bind --mode=ex <C-e> exclaim_quiet wtype -k end

" Compromise style
bind --mode=ex <A-n> exclaim_quiet wtype -k down
bind --mode=ex <A-p> exclaim_quiet wtype -k up

" Insert mode

" Vim style
bind --mode=insert <C-h> exclaim_quiet wtype -k left
bind --mode=insert <C-j> exclaim_quiet wtype -k down
bind --mode=insert <C-k> exclaim_quiet wtype -k up

" Marks

" Personal
quickmark i https://imgur.com
quickmark y https://youtube.com
quickmark r https://www.reddit.com
quickmark g https://www.github.com/
quickmark n https://search.nixos.org
quickmark m https://mail.protonmail.com/u/0/inbox
quickmark c https://calendar.protonmail.com/u/0/

" Work
quickmark J https://leeroy-group.atlassian.net/jira/software/c/projects/OF/boards/69
quickmark C https://calendar.google.com/calendar/r?pli=1
quickmark P https://leeroy-group.atlassian.net/wiki/spaces/BI/overview
quickmark M https://mail.google.com/mail/u/0/#inbox
quickmark G https://github.com/LeeroyGroup
quickmark A https://eu-west-1.console.aws.amazon.com/ec2/v2/home?region=eu-west-1#Instances:sort=instanceId

" Marks on ' and ` like Vim
bindreplaceprefix go '
bindreplaceprefix go `

"
" Blacklist
"

blacklistadd localhost
blacklistadd mail.protonmail.com mode ignore
blacklistadd mail.google.com mode ignore

"
" Auto Commands
"

" DocLoad

" Helpers
autocmd DocLoad .* js N = { param(str) { new URLSearchParams(location.search).get(str); }, pathStart(str) { location.pathname.startsWith(str); }, log: console.log.bind(window, "%c N.log ", "background: #d8dee9; color: #2e3440; font-weight: bold;"), yank(str) { navigator.clipboard.writeText(str); }, run(str) { tri.excmds.composite(str); }, notify(str) { N.run(`notify ${str}`); }, query(str) { document.querySelector(); }, queryAll(str) { document.querySelectorAll(); } }

" search.nixos.org: Add copy to clipboard button
autocmd DocLoad .*search\.nixos\.org/packages.+ js setTimeout(() => { const node = document.createElement('li'); const link = document.createElement('a'); node.appendChild(link); link.href = '#'; link.classList.add('copy-to-clipboard'); link.innerText = 'Copy to clipboard'; document.querySelectorAll('.package ul').forEach(links => { const clone = node.cloneNode(true); clone.firstElementChild.title = links.parentElement.getElementsByClassName('search-result-button')[0].textContent; links.appendChild(clone); }); document.addEventListener('click', event => {  if (event.target.classList.contains('copy-to-clipboard')) { navigator.clipboard.writeText(event.target.title); event.preventDefault(); } }) }, 3000);

" nix-community.github.io/home-manager: Add copy to clipboard button
autocmd DocLoad .*nix-community\.github\.io/home-manager/options\.html.* js document.querySelectorAll('dt span.term').forEach(node => { const dt = node.parentElement.nextElementSibling; const textEl = dt.querySelector('.programlisting') || dt.querySelector('.literal'); if (textEl) { const copy = document.createElement('span'); copy.appendChild(document.createTextNode(' - ')); copy.style.cursor = 'pointer'; const code = document.createElement('code'); code.className = 'copy'; code.setAttribute('data-copy', `${node.textContent} = ${textEl.textContent.trim()};`); code.appendChild(document.createTextNode('Copy to clipboard')); copy.appendChild(code); node.appendChild(copy); } }); document.querySelector('dl').addEventListener('click', event => { if (event.target.className === 'copy') { const text = event.target.getAttribute('data-copy'); navigator.clipboard.writeText(text); console.log(text); }});

"
" Notes
"

" Nord base00 color (background)
" #2e3440

" If it becomes possible to use data-uri's as new tab page, something like this:
" set newtab data:text/html,<html><head><title>New tab</title><style>body { background: rgb(46, 52, 64); color: white; padding: 60px 20px; text-align: center; font: 1rem sans; } h1 { margin: 0 0 20px; } body > div { display: inline-block; text-align: left; } div > div {} span { display: inline-block; } span:first-child { margin: 0 20px 0 0; } pre { margin: 0; } a,a:hover { color: white; display: inline-block; text-decoration: none; top: 12px; right: 12px; position: absolute; }</style></head><body><h1>Where to?</h1><div><div><span><pre>:o</pre></span><span>Open...</span></div><div><span><pre>:t</pre></span><span>Open in tab...</span></div></div><a href="">?</a></body></html>

" vim: set filetype=vim:
" -*- mode: vim -*-
