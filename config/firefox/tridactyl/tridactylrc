""
" TRIDACTYL CONFIGURATION
"
" Adds new commands and binds, and mimics my Neovim configuration as much as possible.
"
" Binds may have several variants: without modifier/leader if complimenting defaults, leader key
" (Space key) binds for more custom functionality, and both if uncertain so it doesn't matter if
" they get mixed up. Time will tell which ones feel most natural.
"
" Search engines usually have full and abbreviated versions, e.g. googlerecent and gr both search
" Google for results from the past year.
"
" The configuration is "immutable" in the sense that it resets all settings on launch. This makes
" it simple to do or try things since we can just restart Firefox to get back to normal.
"
" Color scheme and styles are based on the Catppuccin color palette. See separate CSS file.
"
" Last but not least, thanks to all of you contributing to this great add-on.
"
" Author: Daniel Nordstrom <d@mrnordstrom.com>
" Repository: https://github.com/dnordstrom/dotfiles
""

""
" RESET
""

" Reset all existing settings, binds, and autocmds
sanitise tridactyllocal tridactylsync

""
" SETTINGS
""

colorscheme catppuccin

"
" General
"

set newtab https://nordix.blue#photo
set allowautofocus false
set editorcmd kitty --class popupterm -e nvim %f "+normal!%lGzv%c|"
set hintchars fdsqjklmrezauiopwxcvghtybn
set hintuppercase false
set minincsearchlen 2
set searchengine google
set smoothscroll true
set tabopencontaineraware true
set visualenterauto true
set viewsource tridactyl

"
" Search
"

set searchurls.g https://www.google.com/search?q=%s&num=100
set searchurls.google https://www.google.com/search?q=%s&num=100
set searchurls.gr https://www.google.com/search?q=%s&num=100&tbs=qdr:y
set searchurls.googlerecent https://www.google.com/search?q=%s&num=100&tbs=qdr:y
set searchurls.reddit https://www.google.com/search?q=%s%20site:reddit.com&num=100
set searchurls.mdn https://developer.mozilla.org/en-US/search?q=%s&topic=api&topic=js
set searchurls.npm https://www.npmjs.com/search?q=%s
set searchurls.n https://search.nixos.org/packages?channel=unstable&size=500&query=%s
set searchurls.nix https://search.nixos.org/packages?channel=unstable&size=500&query=%s
set searchurls.sx https://searx.be/?q=%s
set searchurls.searx https://searx.be/?q=%s
set searchurls.sp https://www.startpage.com/do/search?query=%s
set searchurls.startpage https://www.startpage.com/do/search?query=%s
set searchurls.ddg https://duckduckgo.com/?kp=-2&q=%s&ia=web
set searchurls.duckduckgo https://duckduckgo.com/?kp=-2&q=%s&ia=web

"
" Site-specific
"

" Fix unresponsive assignee field in Jira
seturl atlassian.net allowautofocus true

""
" COMMANDS
""

" Pass current URL to command
command withurl composite get_current_url |

" Replace binds with another prefix (exclamation point removes old binds)
command bindreplaceprefix js -d% const [_, oldPrefix, newPrefix] = JS_ARGS; Object.entries(tri.config.get('nmaps')).map(([key, cmd]) => ({ key, cmd })).filter(({ key }) => key.startsWith(oldPrefix)).map(({ key, cmd }) => { tri.excmds.bind('--mode=normal', key.replace(oldPrefix, newPrefix), cmd); }) %
command bindreplaceprefix! js -d% const [_, oldPrefix, newPrefix] = JS_ARGS; Object.entries(tri.config.get('nmaps')).map(([key, cmd]) => ({ key, cmd })).filter(({ key }) => key.startsWith(oldPrefix)).map(({ key, cmd }) => { tri.excmds.bind('--mode=normal', key.replace(oldPrefix, newPrefix), cmd); tri.excmds.unbind(key); }) %

" Show command line notification
command notify js -d% tri.excmds.fillcmdline_tmp(3000, JS_ARGS.join(' ').trim()); %

" Show OS notification
command notifyos js -d% tri.native.run(`notify-send "${JS_ARGS.join(' ').trim()}"`); %

" Show JS console notification
command notifyjs js -d% console.log("%c N.log ", "background: #d8dee9; color: #2e3440; font-weight: bold;", JS_ARGS.join(' ').trim()); %

" Inspect JavaScript object in console
command jsp js -p tri.excmds.js(`console.dir(${JS_ARG})`);
command jsbp js -p tri.excmds.js(`console.dir(${JS_ARG})`);

" Append note to ~/.notes.firefox.md (only URL and title if no argument)
command note js -d% const link = `[${document.title}](${document.location.toString()})`; const note = JS_ARGS.join(' '); if (note) { tri.native.run(`touch ~/.notes.firefox.md && echo "- \"${note}\" --- ${link}\n\$(cat ~/.notes.firefox.md)" > ~/.notes.firefox.md`); } else { tri.native.run(`touch ~/.notes.firefox.md && echo "- ${link}\n$(cat ~/.notes.firefox.md)" > ~/.notes.firefox.md`); } %

" Prefill note command
command fillcmdline_note js -p tri.excmds.fillcmdline_notrail(`note ${JS_ARG}`)

" Prefill note command with selection (using JS because of Wayland)
command fillcmdline_note_selection js tri.excmds.fillcmdline_notrail(`note ${window.getSelection()}`);

" Prefill note command with clipboard
command fillcmdline_note_clipboard js tri.excmds.fillcmdline_notrail(`note ${await tri.excmds.getclip()}`);

" Get Jira issue key from URL
command yankjira js -p if (JS_ARG.trim().toLowerCase() === 'url') N.run('yankjiraurl'); else N.run('yankjiraissue');
command yankjiraissue js const match = N.pathMatch(/[A-Z]{2,5}-[0-9]{1,4}/); if (match) N.yankLoud(match[0]); else N.notify('No issue key found.');
command yankjiraurl js const btn = N.query('.issue_view_permalink_button_wrapper'); if (btn) N.yankLoud(btn.previousElementSibling.querySelector('a').href); else N.notify('No issue link found.');

" Reload config from /etc/nixos
command reconfiglive source /etc/nixos/config/firefox/tridactyl/tridactylrc

" Reload config from ~/.config/tridactyl
command reconfig source

" Save Instagram with proper filename
command writeinstagram js (() => { const a = document.createElement('a'); const cv = document.createElement('canvas'); const cx = cv.getContext('2d'); const img = document.querySelector('[role="dialog"] img'); cv.width = img.width; cv.height = img.height; cx.drawImage(img, 0,0); const ext = new URL(img.src).pathname.match(/(\w+)$/)[0]; const url = cv.toDataURL(`image/${ext == 'jpg' ? 'jpeg' : ext}`); a.download = `${img.alt.toLowerCase().replace(/[^\s\w]/g, '').replace(/\s+/g, '_')}.${ext}`; a.href = url; document.body.appendChild(a); a.click(); document.body.removeChild(a); })()

" Open profile directory
command openprofile js (async () => { await tri.native.run(`xdg-open ${await tri.native.getProfileDir()}`); })()

""
" KEY BINDS
""

"
" General
"

" Escape also hides search highlights
bind <Escape> composite hidecmdline ; mode normal ; nohlsearch

" View Tridactyl configuration as JSON
bind <C-.> viewconfig

" Kill Firefox
bind ZZ exclaim_quiet pkill firefox-bin
bind ZA exclaim_quiet pkill firefox-bin
bind ZQ exclaim_quiet pkill firefox-bin

"
" Reload
"

bind <Space>rr composite reconfig ; notify Configuration reloaded.
bind <Space>rR composite reconfiglive ; notify Live configuration reloaded.
bind <Space>ra reloadall

"
" Notes
"

bind <Space>nn fillcmdline note
bind <Space>ny fillcmdline_note_selection
bind <Space>np fillcmdline_note_clipboard

"
" Go to or do
"

" Open profile directory
bind gd openprofile

" Go to Firefox profile manager
bind gp open about:profiles
bind gP tabopen about:profiles

" Go to Firefox advanced configuration
bind gc open about:config
bind gC tabopen about:config

" View Tridactyl config as JSON
bind gv viewconfig

" Detach tab
bind gd tabdetach

" Detach tab duplicate
bind gD composite tabduplicate ; tabdetach

"
" Search
"

bind / fillcmdline find
bind ? fillcmdline find -?
bind n findnext 1
bind N findnext -1

"
" Yank
"

" Jira issue key or URL
bind yj yankjiraissue
bind yJ yankjiraurl

"
" Write/save
"

bind <Space>wi writeinstagram

"
" Change
"

" Change container on capital C followed by another C for no container, W for work, and so on.
" Multiple version created so that it doesn't matter if Shift is pressed or released on the second
" key press.

" Container -> none
bind CC recontain none
bind Cc recontain none
bind <Space>CC recontain none
bind <Space>Cc recontain none

" Container -> work
bind Cw recontain leeroy
bind CW recontain leeroy
bind <Space>CC recontain leeroy
bind <Space>Cc recontain leeroy

" Container -> remember
bind CR recontain remember
bind Cr recontain remember
bind <Space>Cr recontain remember
bind <Space>CR recontain remember

" Container -> whatever
bind CA recontain area 51
bind Ca recontain area 51
bind <Space>CC recontain area 51
bind <Space>Cc recontain area 51

"
" Navigation
"

" Scroll half page on h and l
bind h scrollpage -0.5
bind l scrollpage 0.5

" Navigate tab and history using Shift
bind H tabprev
bind J back
bind K forward
bind L tabnext

"
" Command mode
"

" Vim style
bind --mode=ex <C-h> exclaim_quiet wtype -k left
bind --mode=ex <C-j> exclaim_quiet wtype -k down
bind --mode=ex <C-k> exclaim_quiet wtype -k up
bind --mode=ex <C-l> exclaim_quiet wtype -k right

" Emacs style
bind --mode=ex <C-u> fillcmdline_notrail
bind --mode=ex <C-a> exclaim_quiet wtype -k home
bind --mode=ex <C-e> exclaim_quiet wtype -k end
bind --mode=ex <A-f> exclaim_quiet wtype -M ctrl -k right
bind --mode=ex <A-b> exclaim_quiet wtype -M ctrl -k left
bind --mode=ex <A-d> exclaim_quiet wtype -M ctrl -k delete

" Compromise style (when Control can't be used)
bind --mode=ex <A-n> exclaim_quiet wtype -k down
bind --mode=ex <A-p> exclaim_quiet wtype -k up

"
" Insert mode (from click) and input mode (from gi bind)
"

" Vim style
bind --mode=insert <C-h> exclaim_quiet wtype -k left
bind --mode=insert <C-j> exclaim_quiet wtype -k down
bind --mode=insert <C-k> exclaim_quiet wtype -k up
bind --mode=insert <C-l> exclaim_quiet wtype -k right

bind --mode=input <C-h> exclaim_quiet wtype -k left
bind --mode=input <C-j> exclaim_quiet wtype -k down
bind --mode=input <C-k> exclaim_quiet wtype -k up
bind --mode=input <C-l> exclaim_quiet wtype -k right

" Emacs stylinsert
bind --mode=insert <C-a> exclaim_quiet wtype -k home
bind --mode=insert <C-e> exclaim_quiet wtype -k end
bind --mode=insert <A-f> exclaim_quiet wtype -M ctrl -k right
bind --mode=insert <A-b> exclaim_quiet wtype -M ctrl -k left
bind --mode=insert <A-d> exclaim_quiet wtype -M ctrl -k delete

bind --mode=input <C-a> exclaim_quiet wtype -k home
bind --mode=input <C-e> exclaim_quiet wtype -k end
bind --mode=input <A-f> exclaim_quiet wtype -M ctrl -k right
bind --mode=input <A-b> exclaim_quiet wtype -M ctrl -k left
bind --mode=input <A-d> exclaim_quiet wtype -M ctrl -k delete

" Open in editor (<C-i> doesn't always work)
bind --mode=insert <A-i> editor
bind --mode=insert <C-.> editor

bind --mode=input <A-i> editor
bind --mode=input <C-.> editor

""
" MARKS
""

"
" Personal
"

quickmark c https://calendar.protonmail.com/u/1
quickmark d https://drive.protonmail.com/u/1
quickmark g https://github.com
quickmark i https://imgur.com
quickmark m https://mail.protonmail.com/u/1
quickmark n https://search.nixos.org/packages?channel=unstable&size=500
quickmark r https://reddit.com
quickmark y https://youtube.com

"
" Work
"

quickmark A https://eu-west-1.console.aws.amazon.com/ec2/v2/home?region=eu-west-1#Instances:sort=instanceId
quickmark C https://calendar.google.com/calendar/r?pli=1
quickmark D https://drive.google.com/drive/shared-drives
quickmark G https://github.com/LeeroyGroup
quickmark J https://leeroy-group.atlassian.net/jira/software/c/projects/OF/boards/69
quickmark M https://mail.google.com/mail/u/0/#inbox
quickmark P https://leeroy-group.atlassian.net/wiki/spaces/BI/overview
quickmark V https://meet.google.com/landing?authuser=1

"
" Marks on ' and ` like Vim
"

bindreplaceprefix go '
bindreplaceprefix go `

""
" BLACKLIST
""

blacklistadd localhost
blacklistadd mail.google.com
blacklistadd calendar.google.com
blacklistadd whimsical.com
blacklistadd figma.com

""
" AUTO COMMANDS
"
" Unfortunately restricted to one line so I recommend pasting into Firefox's console in multi-line
" mode and using its built-in pretty print feature. When done, minify again using editor or one of a
" thousand online tools. Pasting it into a single-line text field such as the URL field also works.
"
" If using Vim, just bounce something on "J".
""

"
" DocLoad
"

" open.qobuz.com: Redirect Qobuz share links to the web player like registered users would expect
autocmd DocLoad open.qobuz.com urlmodify -t open.qobuz.com play.qobuz.com

" search.nixos.org: Add copy to clipboard button
autocmd DocLoad .*search\.nixos\.org/packages.+ js setTimeout(() => { const node = document.createElement('li'); const link = document.createElement('a'); node.appendChild(link); link.href = '#'; link.classList.add('copy-to-clipboard'); link.innerText = 'Copy to clipboard'; document.querySelectorAll('.package ul').forEach(links => { const clone = node.cloneNode(true); clone.firstElementChild.title = links.parentElement.getElementsByClassName('search-result-button')[0].textContent; links.appendChild(clone); }); document.addEventListener('click', event => {  if (event.target.classList.contains('copy-to-clipboard')) { navigator.clipboard.writeText(event.target.title); event.preventDefault(); } }) }, 3000);

" nix-community.github.io/home-manager: Add copy to clipboard button
autocmd DocLoad .*nix-community\.github\.io/home-manager/options\.html.* js document.querySelectorAll('dt span.term').forEach(node => { const dt = node.parentElement.nextElementSibling; const textEl = dt.querySelector('.programlisting') || dt.querySelector('.literal'); if (textEl) { const copy = document.createElement('span'); copy.appendChild(document.createTextNode(' - ')); copy.style.cursor = 'pointer'; const code = document.createElement('code'); code.className = 'copy'; code.setAttribute('data-copy', `${node.textContent} = ${textEl.textContent.trim()};`); code.appendChild(document.createTextNode('Copy to clipboard')); copy.appendChild(code); node.appendChild(copy); } }); document.querySelector('dl').addEventListener('click', event => { if (event.target.className === 'copy') { const text = event.target.getAttribute('data-copy'); navigator.clipboard.writeText(text); console.log(text); }});

" all: Helpers
autocmd DocLoad .* js N = { param(str) { new URLSearchParams(location.search).get(str); }, pathStart(str) { return location.pathname.startsWith(str); }, pathMatch(regex) { const matches = location.href.match(regex); return matches; }, log: console.log.bind(window, "%c N.log ", "background: #d8dee9; color: #2e3440; font-weight: bold;"), yank(str) { navigator.clipboard.writeText(str); }, yankLoud(str) { N.yank(str); N.notify(`Yanked "${str}"`); }, run(str) { tri.excmds.composite(str); }, notify(str) { N.run(`notify ${str}`); }, query(str) { return document.querySelector(str); }, queryAll(str) { return document.querySelectorAll(str); }, q(str) { return N.query(str); }, qa(str) { return N.queryAll(str); } }

""
" NOTES
""

" If it becomes possible to use data-uri's as new tab page, something like this would work:
" set newtab data:text/html,<html><head><title>New tab</title><style>body { background: rgb(46, 52, 64); color: white; padding: 60px 20px; text-align: center; font: 1rem sans; } h1 { margin: 0 0 20px; } body > div { display: inline-block; text-align: left; } div > div {} span { display: inline-block; } span:first-child { margin: 0 20px 0 0; } pre { margin: 0; } a,a:hover { color: white; display: inline-block; text-decoration: none; top: 12px; right: 12px; position: absolute; }</style></head><body><h1>Where to?</h1><div><div><span><pre>:o</pre></span><span>Open...</span></div><div><span><pre>:t</pre></span><span>Open in tab...</span></div></div><a href="">?</a></body></html>

" vim: set filetype=vim:
" -*- mode: vim -*-
