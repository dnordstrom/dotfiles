#!/usr/bin/env python3
# _*_ coding: utf-8 _*_

"""
This script uses the i3ipc python library to create dynamic workspace names in Sway / i3

Author: Piotr Miller
e-mail: nwg.piotr@gmail.com
Project: https://github.com/nwg-piotr/swayinfo
License: GPL3

Based on the example from https://github.com/altdesktop/i3ipc-python/blob/master/README.rst

Dependencies: python-i3ipc>=2.0.1 (i3ipc-python), python-xlib

Pay attention to the fact, that your workspaces need to be numbered, not named for the script to work.

Use:
bindsym $mod+1 workspace number 1

instead of:
bindsym $mod+1 workspace 1

in your ~/.config/sway/config or ~/.config/i3/config file.
"""

from i3ipc import Connection, Event

# Truncate workspace name to this value
max_length = 50

# Create the Connection object that can be used to send commands and subscribe to events.
i3 = Connection()


# A glyph will substitute the WS name if no window active, otherwise it'll be prepended before the window name.
# Glyphs below should look well with the icomoon font installed.
# Add more glyphs if you use more than 8 workspaces.
def glyph(ws_number):
    glyphs = ["WWW", "TERM", "BACKGROUND", "GAME", "TERM", "PIC", "TXT", "CODE"]
    try:
        return glyphs[ws_number - 1]
    except IndexError:
        return "?"


# Name the workspace after the focused window name
def assign_generic_name(i3, e):
    try:
        if not e.change == 'rename':  # avoid looping
            con = i3.get_tree().find_focused()
            if not con.type == 'workspace':  # avoid renaming new empty workspaces on 'binding' event
                if not e.change == 'new':
                    ws_old_name = con.workspace().name
                    ws_name = "%s:%s" % con.workspace().num, glyph(con.workspace().num)

                    i3.command('rename workspace "%s" to %s' % (ws_old_name, ws_name))
                else:
                    # In sway we may open a new window w/o moving focus; let's give the workspace a name anyway.
                    con = i3.get_tree().find_by_id(e.container.id)
                    ws_num = con.workspace().num
                    w_name = con.name if con.name else ''

                    if w_name and ws_num:
                        name = "%s: %s %s" % (ws_num, glyph(ws_num))
                        i3.command('rename workspace "%s" to %s' % (ws_num, name))

            else:
                # Give the (empty) workspace a generic name: "number: glyph" (like "1: î¨³")
                ws_num = con.workspace().num
                ws_new_name = "%s: %s" % (ws_num, glyph(ws_num))

                i3.command('rename workspace to "{}"'.format(ws_new_name))
    except:
        pass


def main():
    # Subscribe to events
    i3.on(Event.WORKSPACE_FOCUS, assign_generic_name)
    i3.on(Event.WINDOW_FOCUS, assign_generic_name)
    i3.on(Event.WINDOW_TITLE, assign_generic_name)
    i3.on(Event.WINDOW_CLOSE, assign_generic_name)
    i3.on(Event.WINDOW_NEW, assign_generic_name)
    i3.on(Event.BINDING, assign_generic_name)

    i3.main()


if __name__ == "__main__":
    main()
