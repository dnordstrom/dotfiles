#!/usr/bin/env sh
#
# Uses `slurp` to let us select an area to screenshot with `grim`.
#
# USAGE:
#   `./screensnap.sh [TARGET FILE]`
#

set -eu

errors=false
file_manager="nautilus"
image_viewer="feh"
option_open_file=false
option_open_dir=false
option_upload=false
option_copy=false
option_help=false
option_window=false
option_screen=false
has_curl=false
area=""
timestamp="$(date '+%Y%m%d_%H_%M_%S')"
target_dir=${SCREENSNAP_TARGET_DIR:-"$HOME/Pictures/Screenshots"}
target="$target_dir/$timestamp.png"
imgur_client_id="${IMGUR_CLIENT_ID:=e4ab8199be97038}"
USAGE="USAGE:
    $(basename "$0") [options]
    $(basename "$0") [options] [target file]

DESCRIPTION:
    Takes a screenshot of a region (default), window, or screen. The file path or URL (if uploaded) will be copied to clipboard. Optionally the actual image can be copied to clipboard using the --copy option.

OPTIONS:
    --help, -h        Show this help text
    --screen, -s      Select a screen
    --window, w       Select a window
    --upload, -u      Upload to Imgur
    --copy, -c        Copy image contents to clipboard
    --open, -o        Open with image viewer
    --directory, -d   Open containing directory"

# Check if cURL is available
! [ -x "$(command -v curl)" ] || has_curl=true

# Parse flags and parameters. Credit to Richard Blechinger, see article at:
# https://pretzelhands.com/posts/command-line-flags
for arg in "$@"
do
  case $arg in
    -r|--region)
    option_region=true
    shift
    ;;
    -s|--screen)
    option_screen=true
    shift
    ;;
    -w|--window)
    option_window=true
    shift
    ;;
    -o|--open)
    option_open_file=true
    shift
    ;;
    -d|--directory)
    option_open_dir=true
    shift
    ;;
    -u|--upload)
    option_upload=true
    shift
    ;;
    -c|--copy)
    option_copy=true
    shift
    ;;
    -h|--help)
    option_help=true
    shift
    ;;
    *)
    if [ -d "$(realpath "$1" > /dev/null 2>&1)" ]; then
      # Target is an existing directory
      target="$(realpath "$1")/$timestamp.png"
    elif [ -d "$(dirname "$(realpath "$1" > /dev/null 2>&1)")" ]; then
      # Target parent is an existing directory, use as full file path
      target="$(realpath "$(dirname "$1")")/$(basename "$1")"
      echo "$target"
    else
      # Target is invalid
      target=false
    fi
    shift
    ;;
  esac
done

# Show help if the --help (or -h) flag is used
if [ "$option_help" = true ]; then
  echo "$usage"
  exit 0
fi

# Checking if target is writable
if ! [ "$target" = "false" ] && touch "$target" > /dev/null 2>&1; then
  rm "$target" > /dev/null 2>&1 # Remove temporary file
else
  echo "Cannot write to $target. Please check that the directory exists and is writable."
fi

# Use slurp to select a screen, region, or window
if [ "$option_window" = true ]; then
  area="$(swaymsg -t get_tree | jq -r '.. | select(.pid? and .visible?) | .rect | "\(.x),\(.y) \(.width)x\(.height)"' | slurp)"
elif [ "$option_screen" = true ]; then
  area="$(swaymsg -t get_outputs | jq -r '.[] | select(.active) | .rect | "\(.x),\(.y) \(.width)x\(.height)"' | slurp)"
else
  area="$(slurp)"
fi

# Take the screenshot
grim -g "$area" "$target"

# Uses cURL to upload an image to Imgur
upload() {
  curl -s -H "Authorization: Client-ID $imgur_client_id" -H "Expect: " -F "image=$1" https://api.imgur.com/3/image.xml
}

# Upload the screenshot to Imgur if the --upload (or -u) flag is used
if [ "$option_upload" = true ] && [ "$has_curl" = true ]; then
  response=$(upload "@$target") 2>/dev/null

  # The cURL command failed
  if response=$(upload "@$target"); then
    echo "Upload failed." >&2
    errors=true
  fi

  # The cURL command succeeded but Imgur responded with error
  if echo "$response" | grep -q 'success="0"'; then
    errors=true
    message="${response##*<error>}"

    echo "Error message from Imgur:" >&2
    echo "${message%%</error>*}" >&2
  fi

  # Parse the response
  url="${RESPONSE##*<link>}"
  url="${url%%</link>*}"
  delete_hash="${response##*<deletehash>}"
  delete_hash="${delete_hash%%</deletehash>*}"

  # Get the image URL
  url="${url//http:/https:}" # | sed 's/^http:/https:/'
  target="$url"
elif [ "$option_upload" = true ]; then
  # The upload flag was used but cURL is not available
  echo "Cannot find cURL, aborting upload. The screenshot is still saved locally." >&2
fi

if [ "$option_copy" = true ]; then
  # If the --copy (or -c) flag is used, copy the entire image to clipboard
  wl-copy < "$target"
else
  # Otherwise copy the output (file path or image URL) to clipboard
  wl-copy "$target"
fi

# Open the screenshot with image viewer if the --open (or -o) flag is used
[ "$option_open_file" = "true" ] && "$image_viewer" "$target" 2> /dev/null &

# Open the containing directory if --directory (or -d) flag is used
[ "$option_open_dir" = "true" ] && "$file_manager" "$(dirname "$target")" 2> /dev/null &

echo "$target"

if $errors; then
	exit 1
fi
