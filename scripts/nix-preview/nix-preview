#!/usr/bin/env sh
#
# Links local `.config` directories to `/etc/nixos`, allowing "live" editing to
# see changes without rebuilding. Asks for confirmation before deleting to
# prevent sadness.
#

set -eu

# Set up error and interruption traps to show if toggle fails or is cancelled
trap 'printf "\n\n%s\n\n" "Error: Preview mode not enabled."; exit 1;' ERR
trap 'printf "\n\n%s\n\n" "Cancelled: Preview mode not enabled."; exit 1;' SIGINT

notestart=$(tput bold; tput setaf 0; tput setab 3)
noteend=$(tput sgr0)
titlestart=$(tput bold; tput setaf 0; tput setab 6)
titleend=$(tput sgr0)
cleanupfile="$HOME/.nix-preview-cleanup"
cleanupbang="#!/usr/bin/env sh"
cleanup=""
usage="USAGE:
    $(basename "$0")

DESCRIPTION:
    Removes symlinks to currently installed configurations and replaces them with symlinks to the /etc/nixos configurations for previewing changes without first needing to run a NixOS rebuild. Warns before deleting files.

OPTIONS:
    --help, -h          Show this help text
    --cleanup-file, -c  Path to generate cleanup script at (default: ~/.nix-preview-cleanup)
"

for arg in "$@"
do
  case $arg in
    # Cleanup script path
    -c|--cleanup-file)
    shift
    cleanup="$1"
    ;;
    -h|--help)
    printf "\n%s\n" "$usage"
    exit 0
    ;;
  esac
done

# Print title
printf "\n%s\n" "$titlestart Configuration preview mode ""$titleend"

# Get full cleanup file path and make sure it's valid
if ! realpath "$cleanupfile" > /dev/null 2>&1; then
  printf "\n%s\n\n" "Error: Invalid cleanup script path."
  exit 1
else
  cleanupfile=$(realpath "$cleanupfile")
fi

# Customizable confirmation prompt
confirm() {
  local OPTIND
  local strict=0
  local yes="y" 
  local no="n"
  local left="["
  local right="]"
  local grep="--ignore-case --quiet" # Default grep flags
  local prompt="Continue?" # Default message

  for arg in "$@"
  do
    case $arg in
      # Right side of prompt
      -r|--right)
      shift
      right="$1"
      ;;
      # Left side of prompt
      -l|--left)
      shift
      left="$1"
      ;;
      # Strict mode requires uppercase for yes
      -s|--strict)
      strict=1
      shift
      ;;
      # Option to display for yes
      -y|--yes)
      shift
      yes="$1"
      ;;
       # Option to display for no
      -n|--no)
      shift
      no="$1"
      ;;
      # Show usage information
      -h|--help)
      help="$1"
      shift
      ;;
      # The remaining is used as prompt
      *)
      prompt="$@"
      shift
      ;;
    esac
  done

  # Strict mode always requires uppercase yes
  if [ "$strict" -gt 0 ]; then
    yes=$(echo "$yes" | tr "[:lower:]" "[:upper:]")
    grep="--quiet"
  fi

  # Print message and prompt
  printf "%s " "$prompt $left$yes/$no$right"

  # Set stty options to get one letter input without waiting for enter key and
  # then reset to previous options
  sttystate=$(stty -g)
  stty raw -echo
  input=$(head -c 1)
  stty "$sttystate"

  printf "%s" "$input"

  # Grep input using flags determined by strict mode
  if echo "$input" | grep "$grep" "^$yes"; then
    return 0 # Yes
  else
    return 1 # No
  fi
}

# Print and run command
loudly() {
  if [ $# -gt 0 ]; then
    printf "\$ %s\n" "$@"
    eval "$@"
    return 0
  else
    return 1
  fi
}

# Check if string contains another string
stringcontains() {
  string="$1"
  substring="$2"

  if [ "${string#*$substring}" != "$string" ]; then
    return 0
  else
    return 1
  fi
}

# Check if string starts with another string
stringstartswith() {
  string="$1"
  substring="$2"

  if [ "${string#$substring}" != "$string" ]; then
    return 0
  else
    return 1
  fi
}

# Print cleanup
printf "\n%s\n\n" "Any symlinks created need to be removed before a nixos-rebuild. A cleanup script for this will be generated at $cleanupfile. For convenience, create a prebuild script or alias, e.g. aliasing \"nb\" to \"$cleanupfile; nixos-rebuild switch --upgrade;\"."

# Ask about Sway
if [ -L "$HOME/.config/sway" ]; then
  currenttarget="$(readlink --canonicalize ~/.config/sway)"

  if stringstartswith "$currenttarget" "/etc/nixos/config/"; then
    printf "$notestart SKIPPED $noteend %s\n" "Sway already in preview mode."
  else
    printf "%s\n" "Sway not in preview mode but linked to $currenttarget."
  fi
else
  if confirm --strict "Enable for Sway (rm -rf ~/.config/sway)?"; then
    printf "\n"
    loudly "rm -rf ~/.config/sway"
    loudly "ln -s /etc/nixos/config/sway ~/.config/sway"
    cleanup="$cleanup\nrm ~/.config/sway"
  fi
fi

exit

if confirm --strict "Enable for Sway (rm -rf ~/.config/sway)?"; then
  printf "\n"
  loudly "rm -rf ~/.config/sway"
  loudly "ln -s /etc/nixos/config/sway ~/.config/sway"
  cleanup="$cleanup\nrm ~/.config/sway"
fi

printf "\n"

# Ask about Waybar
if confirm --strict "Enable for Waybar (rm -rf ~/.config/waybar)?"; then
  printf "\n"
  loudly "rm -rf ~/.config/waybar"
  loudly "ln -s /etc/nixos/config/waybar ~/.config/waybar"
  cleanup="$cleanup\nrm ~/.config/waybar"
fi

printf "\n"

# Ask about tmux
if confirm --strict "Enable for tmux (rm -rf ~/.config/tmux)?"; then
  printf "\n"
  loudly "rm -rf ~/.config/tmux"
  loudly "ln -s /etc/nixos/config/tmux ~/.config/tmux"
  cleanup="$cleanup\nrm ~/.config/tmux"
fi

printf "\n"

# Ask about Alacritty
if confirm --strict "Enable for Alacritty (rm -rf ~/.config/alacritty)?"; then
  printf "\n"
  loudly "rm -rf ~/.config/alacritty"
  loudly "ln -s /etc/nixos/config/alacritty ~/.config/alacritty"
  cleanup="$cleanup\nrm ~/.config/alacritty"
fi

printf "\n"

# Ask about Kitty
if confirm --strict "Enable for Kitty (rm -rf ~/.config/kitty)?"; then
  printf "\n"
  loudly "rm -rf ~/.config/kitty"
  loudly "ln -s /etc/nixos/config/kitty ~/.config/kitty"
  cleanup="$cleanup\nrm ~/.config/kitty"
fi

printf "\n"

# Ask about Tridactyl
if confirm --strict "Enable for Tridactyl (rm -rf ~/.config/tridactyl)?"; then
  printf "\n"
  loudly "rm -rf ~/.config/tridactyl"
  loudly "ln -s /etc/nixos/config/firefox/tridactyl ~/.config/tridactyl"
  cleanup="$cleanup\nrm ~/.config/tridactyl"
fi

printf "\n"

# Ask about Neovim
if confirm --strict "Enable for Neovim (rm -rf ~/.config/nvim/ftplugin + lua)?"; then
  printf "\n"
  loudly "rm -rf ~/.config/nvim/ftplugin"
  loudly "rm -rf ~/.config/nvim/lua"
  loudly "ln -s /etc/nixos/config/nvim/ftplugin ~/.config/nvim/ftplugin"
  loudly "ln -s /etc/nixos/config/nvim/lua ~/.config/nvim/lua"
  cleanup="$cleanup\nrm ~/.config/nvim/ftplugin\nrm ~/.config/nvim/lua"
fi

printf "\n"

# Ask about Vifm
if confirm --strict "Enable for Vifm (rm -rf ~/.config/vifm)?"; then
  printf "\n"
  loudly "rm -rf ~/.config/vifm"
  loudly "ln -s /etc/nixos/config/vifm ~/.config/vifm"
  cleanup="$cleanup\nrm ~/.config/vifm"
fi

printf "\n"

# Write cleanup script to disk and show message if preview was enabled for at
# least one configuration.
if [ -n "$cleanup" ]; then
  if [ -f "$cleanupfile" ]; then
  # Write script
  printf "$cleanupbang\n$cleanup\nrm $cleanupfile" > "$cleanupfile"
  chmod u+x "$cleanupfile"

  # Show result message
  printf "%s\n\n" "Preview mode enabled!"
  printf "%s\n\n" "$notestart NOTE: ""$noteend Modifying these local files will now change the /etc/nixos sources. Rebuilding NixOS returns life back to normal."
else
  printf "%s\n\n" "No configurations selected!"
fi

