#!/usr/bin/env sh
#
# FZF APPLICATION LAUNCHER
#
# Opens new terminal window listing applications with fzf, and launches selected application with
# swaymsg exec.
#
# Entirely based on fzf-startify by ldelossa. Rewritten for NixOS support, POSIX and shfmt compliance, ANSI
# colored output, and improved readability.
#
# https://github.com/ldelossa/sway-fzfify
#

# if [ "$1" = "yank" ]; then
#   printf "%s" "$2" | wl-copy
#   kitty --hold -- echo "Command: $2"
#   exit 0
# fi
#
# CONSTANTS
#

SCRIPT="$0"
BOLD="\e[1m"
BLUE="\e[34m"
BLACK="\e[30m"
ITALIC="\e[3m"
NORMAL="\e[0m"

#
# OPTIONS
#

# Terminal
terminal="kitty"
class="fuzzyterm"
title="fuzzyterm"
opacity="0.9"

# Styles
namestyle="$BOLD$BLUE"
descstyle="$ITALIC$BLACK"
typestyle="$BLACK"

#
# LAUNCHER
#

# If LAUNCHER_FIFO is set then show launcher, otherwise rerun in new terminal window. Boilerplate
# for setting window title and class is handled by the script itself, so we can run or bind it by
# name, i.e. `launch-app` rather than `kitty --class launch --title Launch -- sh -c launch-app`.
if [ -n "$LAUNCHER_FIFO" ]; then
  choices="" # Items to pass fzf, e.g. "Firefox (Web Browser)\nDolphin (File Manager)\n ..."
  entries="" # Items mapped to commands, e.g. "Firefox (Web Browser):firefox\n ..."

  # Find .desktop files
  fd -e desktop -tx -tl . /etc/profiles/per-user/dnordstrom/share/applications /var/lib/flatpak/app >"$LAUNCHER_FIFO" &

  # Read results from pipe
  while read -r path; do
    unset flatpak

    # Make sure the right .desktop files are used for Flatpak applications since they exist in both
    # export/ and files/ but only the former contain `flatpak run` commands
    if [ "${path#*"files/share/applications"}" != "$path" ]; then
      # Wrong file
      continue
    elif [ "${path#*"export/share/applications"}" != "$path" ]; then
      # Correct file
      flatpak="true"
    fi

    # Get .desktop file contents and use grep with Perl expressions to find application name,
    # description, and command stripped of any field codes such as %U, Flatpak codes like @@, and
    # surrounding quotes. We make an ANSI colored label to pass to fzf but the selected item is
    # returned without formatting so we keep name in sync and use that for command lookup.
    cmd="$(grep -Pwo -m 1 -e "(?<=^Exec=).*" <"$path")"
    name="$(grep -Pwo -m 1 -e "(?<=^Name=).*" <"$path")"
    label="$namestyle$name$NORMAL"
    generic="$(grep -Pwo -m 1 -e "(?<=^GenericName=).*" <"$path")"

    # Skip if command is empty (check duplicates with "${entries#*"$path"}" != "$entries")
    if [ -z "$cmd" ]; then
      continue
    fi

    # Add generic name
    if [ -n "$generic" ]; then
      label="$label ($descstyle$generic$NORMAL)"
      name="$name ($generic)"
    fi

    # Add application type
    if [ -n "$flatpak" ]; then
      label="$label$typestyle [Flatpak]$NORMAL"
      name="$name [Flatpak]"
    else
      label="$label$typestyle [Nix]$NORMAL"
      name="$name [Nix]"
    fi

    # Yank command to clipboard if the yank argument matches the generated name
    if [ "$1" = "yank" ] && [ "$2" = "$name" ]; then
      printf "%s" "$cmd" | wl-copy
      exit 0
    fi

    entries="$name:$cmd\n$entries"
    choices="$label\n$choices"
  done <"$LAUNCHER_FIFO"

  # Show menu and get selection with parenthesis and brackets escaped (for grep)
  selection="$(printf "%b" "$choices" | fzf --color="bg+:-1" --ansi --cycle --no-info --prompt "› " --pointer "➔ " --marker "» " --bind "tab:down,btab:up,ctrl-u:half-page-up,ctrl-d:half-page-down,ctrl-y:execute-silent(kitty -- /etc/nixos/scripts/launch/launch-application yank {})+abort" | sed 's,[][()\.^$\/?*+],\\&,g')"

  # If selection is not empty, launch mapped command
  if [ -n "$selection" ]; then
    # Remove escape sequences from entries and find mapped command
    cmd="$(printf "%b" "$entries" | sed 's,\x1B\[[0-9;]*[a-zA-Z],,g' | grep -Pwo -m 1 -e "(?<=^$selection:).*" | sed 's,%.,,g' | sed 's,^"\(.*\)"$,\1,g' | sed 's,@@.*@@,,g')"

    # Run the command associated with the entry (using `swaymsg exec` if possible)
    if [ -x "$(command -v swaymsg)" ]; then
      # Found swaymsg: use it to keep process alive after the shell exits
      swaymsg -t command exec "$cmd"
    elif [ -x "$(command -v bash)" ]; then
      # Found bash: use disown built-in to keep process alive after the shell exits
      nohup bash -c "nohup \"$cmd\" < /dev/null & disown" &
      sleep 0.1
    else
      # No swaymsg or bash: use nohup to keep process alive after the shell exits
      nohup "$cmd" </dev/null &
      sleep 0.1
    fi
  fi

  exit 0
fi

#
# INITIALIZE
#

# Create named pipe for search results
LAUNCHER_FIFO="$(mktemp -d)/results"
mkfifo -m 600 "$LAUNCHER_FIFO"

# Rerun in new terminal window
"$terminal" \
  --title "$title" \
  --class "$class" \
  --override "background_opacity=$opacity" \
  --override "adjust_line_height=200%" \
  -e \
  sh -c "LAUNCHER_FIFO=$LAUNCHER_FIFO $SCRIPT"
